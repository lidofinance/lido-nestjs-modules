/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/eth/v1/beacon/genesis': {
    /** Retrieve details of the chain's genesis which can be used to identify chain. */
    get: operations['getGenesis'];
  };
  '/eth/v1/beacon/states/{state_id}/root': {
    /** Calculates HashTreeRoot for state with given 'stateId'. If stateId is root, same value will be returned. */
    get: operations['getStateRoot'];
  };
  '/eth/v1/beacon/states/{state_id}/fork': {
    /** Returns [Fork](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object for state with given 'stateId'. */
    get: operations['getStateFork'];
  };
  '/eth/v1/beacon/states/{state_id}/finality_checkpoints': {
    /**
     * Returns finality checkpoints for state with given 'stateId'.
     * In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.
     */
    get: operations['getStateFinalityCheckpoints'];
  };
  '/eth/v1/beacon/states/{state_id}/validators': {
    /**
     * Returns filterable list of validators with their balance, status and index.
     *
     * Information will be returned for all indices or public key that match known validators.  If an index or public key does not
     * match any known validator, no information will be returned but this will not cause an error.  There are no guarantees for the
     * returned data in terms of ordering; both the index and public key are returned for each validator, and can be used to confirm
     * for which inputs a response has been returned.
     */
    get: operations['getStateValidators'];
    /**
     * Returns filterable list of validators with their balance, status and index.
     *
     * Information will be returned for all indices or public key that match known validators.  If an index or public key does not
     * match any known validator, no information will be returned but this will not cause an error.  There are no guarantees for the
     * returned data in terms of ordering; both the index and public key are returned for each validator, and can be used to confirm
     * for which inputs a response has been returned.
     *
     * The POST variant of this endpoint has the same semantics as the GET endpoint but passes
     * the lists of IDs and statuses via a POST body in order to enable larger requests.
     */
    post: operations['postStateValidators'];
  };
  '/eth/v1/beacon/states/{state_id}/validators/{validator_id}': {
    /** Returns validator specified by state and id or public key along with status and balance. */
    get: operations['getStateValidator'];
  };
  '/eth/v1/beacon/states/{state_id}/validator_balances': {
    /**
     * Returns filterable list of validators balances.
     *
     * Balances will be returned for all indices or public key that match known validators. If an index or public key does not
     * match any known validator, no balance will be returned but this will not cause an error. There are no guarantees for the
     * returned data in terms of ordering; the index is returned for each balance, and can be used to confirm for which inputs a
     * response has been returned.
     */
    get: operations['getStateValidatorBalances'];
    /**
     * Returns filterable list of validators balances.
     *
     * Balances will be returned for all indices or public keys that match known validators. If an index or public key does not
     * match any known validator, no balance will be returned but this will not cause an error. There are no guarantees for the
     * returned data in terms of ordering; the index is returned for each balance, and can be used to confirm for which inputs a
     * response has been returned.
     */
    post: operations['postStateValidatorBalances'];
  };
  '/eth/v1/beacon/states/{state_id}/validator_identities': {
    /**
     * Returns filterable list of validators identities.
     *
     * Identities will be returned for all indices or public keys that match known validators. If an index or public key does not
     * match any known validator, no identity will be returned but this will not cause an error. There are no guarantees for the
     * returned data in terms of ordering.
     *
     *  Depending on `Accept` header data can be returned either as JSON or as bytes serialized by SSZ.
     */
    post: operations['postStateValidatorIdentities'];
  };
  '/eth/v1/beacon/states/{state_id}/committees': {
    /** Retrieves the committees for the given state. */
    get: operations['getEpochCommittees'];
  };
  '/eth/v1/beacon/states/{state_id}/sync_committees': {
    /** Retrieves the current sync committee for the given state. Also returns the subcommittee assignments. */
    get: operations['getEpochSyncCommittees'];
  };
  '/eth/v1/beacon/states/{state_id}/randao': {
    /**
     * Fetch the RANDAO mix for the requested epoch from the state identified by `state_id`.
     *
     * If an epoch is not specified then the RANDAO mix for the state's current epoch will be returned.
     *
     * By adjusting the `state_id` parameter you can query for any historic value of the RANDAO mix.
     * Ordinarily states from the same epoch will mutate the RANDAO mix for that epoch as blocks are
     * applied.
     */
    get: operations['getStateRandao'];
  };
  '/eth/v1/beacon/headers': {
    /** Retrieves block headers matching given query. By default it will fetch current head slot blocks. */
    get: operations['getBlockHeaders'];
  };
  '/eth/v1/beacon/headers/{block_id}': {
    /** Retrieves block header for given block id. */
    get: operations['getBlockHeader'];
  };
  '/eth/v1/beacon/blinded_blocks': {
    /**
     * Instructs the beacon node to use the components of the `SignedBlindedBeaconBlock` to construct and publish a
     * `SignedBeaconBlock` by swapping out the `transactions_root` for the corresponding full list of `transactions`.
     * The beacon node should broadcast a newly constructed `SignedBeaconBlock` to the beacon network,
     * to be included in the beacon chain. The beacon node is not required to validate the signed
     * `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been
     * successful. The beacon node is expected to integrate the new block into its state, and
     * therefore validate the block internally, however blocks which fail the validation are still
     * broadcast but a different status code is returned (202). Before Bellatrix, this endpoint will accept
     * a `SignedBeaconBlock`.
     */
    post: operations['publishBlindedBlock'];
  };
  '/eth/v2/beacon/blinded_blocks': {
    /**
     * Instructs the beacon node to use the components of the `SignedBlindedBeaconBlock` to construct and publish a
     * `SignedBeaconBlock` by swapping out the `transactions_root` for the corresponding full list of `transactions`.
     * The beacon node should broadcast a newly constructed `SignedBeaconBlock` to the beacon network,
     * to be included in the beacon chain. The beacon node is not required to validate the signed
     * `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been
     * successful. The beacon node is expected to integrate the new block into its state, and
     * therefore validate the block internally, however blocks which fail the validation are still
     * broadcast but a different status code is returned (202). Before Bellatrix, this endpoint will accept
     * a `SignedBeaconBlock`. The broadcast behaviour may be adjusted via the `broadcast_validation`
     * query parameter.
     */
    post: operations['publishBlindedBlockV2'];
  };
  '/eth/v1/beacon/blocks': {
    /**
     * Instructs the beacon node to broadcast a newly signed beacon block to the beacon network,
     * to be included in the beacon chain. A success response (20x) indicates that the block
     * passed gossip validation and was successfully broadcast onto the network.
     * The beacon node is also expected to integrate the block into state, but may broadcast it
     * before doing so, so as to aid timely delivery of the block. Should the block fail full
     * validation, a separate success response code (202) is used to indicate that the block was
     * successfully broadcast but failed integration. After Deneb, this additionally instructs
     * the beacon node to broadcast all given blobs.
     */
    post: operations['publishBlock'];
  };
  '/eth/v2/beacon/blocks': {
    /**
     * Instructs the beacon node to broadcast a newly signed beacon block to the beacon network,
     * to be included in the beacon chain. A success response (20x) indicates that the block
     * passed gossip validation and was successfully broadcast onto the network.
     * The beacon node is also expected to integrate the block into the state, but may broadcast it
     * before doing so, so as to aid timely delivery of the block. Should the block fail full
     * validation, a separate success response code (202) is used to indicate that the block was
     * successfully broadcast but failed integration. After Deneb, this additionally instructs
     * the beacon node to broadcast all given blobs. The broadcast behaviour may be adjusted via the
     * `broadcast_validation` query parameter.
     */
    post: operations['publishBlockV2'];
  };
  '/eth/v2/beacon/blocks/{block_id}': {
    /**
     * Retrieves block details for given block id.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
     */
    get: operations['getBlockV2'];
  };
  '/eth/v1/beacon/blocks/{block_id}/root': {
    /** Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader */
    get: operations['getBlockRoot'];
  };
  '/eth/v1/beacon/blocks/{block_id}/attestations': {
    /** Retrieves attestation included in requested block. */
    get: operations['getBlockAttestations'];
  };
  '/eth/v2/beacon/blocks/{block_id}/attestations': {
    /** Retrieves attestation included in requested block. */
    get: operations['getBlockAttestationsV2'];
  };
  '/eth/v1/beacon/blob_sidecars/{block_id}': {
    /**
     * Retrieves blob sidecars for a given block id.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ.
     *
     * If the `indices` parameter is specified, only the blob sidecars with the specified indices will be returned. There are no guarantees
     * for the returned blob sidecars in terms of ordering.
     */
    get: operations['getBlobSidecars'];
  };
  '/eth/v1/beacon/rewards/sync_committee/{block_id}': {
    /** Retrieves rewards info for sync committee members specified by array of public keys or validator index. If no array is provided, return reward info for every committee member. */
    post: operations['getSyncCommitteeRewards'];
  };
  '/eth/v1/beacon/deposit_snapshot': {
    /**
     * Retrieve [EIP-4881](https://eips.ethereum.org/EIPS/eip-4881) Deposit Tree Snapshot.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
     */
    get: operations['getDepositSnapshot'];
  };
  '/eth/v1/beacon/rewards/blocks/{block_id}': {
    /** Retrieve block reward info for a single block */
    get: operations['getBlockRewards'];
  };
  '/eth/v1/beacon/rewards/attestations/{epoch}': {
    /** Retrieve attestation reward info for validators specified by array of public keys or validator index. If no array is provided, return reward info for every validator. */
    post: operations['getAttestationsRewards'];
  };
  '/eth/v1/beacon/blinded_blocks/{block_id}': {
    /**
     * Retrieves blinded block for given block ID.
     * Depending on `Accept` header it can be returned either as JSON or as bytes serialized by SSZ
     */
    get: operations['getBlindedBlock'];
  };
  '/eth/v1/beacon/light_client/bootstrap/{block_root}': {
    /**
     * Requests the [`LightClientBootstrap`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/sync-protocol.md#lightclientbootstrap) structure corresponding to a given post-Altair beacon block root.
     * Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.
     *
     * Servers SHOULD provide results as defined in [`create_light_client_bootstrap`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/full-node.md#create_light_client_bootstrap). To fulfill a request, the requested block's post state needs to be known.
     */
    get: operations['getLightClientBootstrap'];
  };
  '/eth/v1/beacon/light_client/updates': {
    /**
     * Requests the [`LightClientUpdate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/sync-protocol.md#lightclientupdate) instances in the sync committee period range `[start_period, start_period + count)`, leading up to the current head sync committee period as selected by fork choice.
     * Depending on the `Accept` header they can be returned either as JSON or SSZ-serialized bytes.
     *
     * Servers SHOULD provide results as defined in [`create_light_client_update`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/full-node.md#create_light_client_update). They MUST respond with at least the earliest known result within the requested range, and MUST send results in consecutive order (by period). The response MUST NOT contain more than [`min(MAX_REQUEST_LIGHT_CLIENT_UPDATES, count)`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/p2p-interface.md#configuration) results.
     */
    get: operations['getLightClientUpdatesByRange'];
  };
  '/eth/v1/beacon/light_client/finality_update': {
    /**
     * Requests the latest [`LightClientFinalityUpdate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/sync-protocol.md#lightclientfinalityupdate) known by the server.
     * Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.
     *
     * Servers SHOULD provide results as defined in [`create_light_client_finality_update`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/full-node.md#create_light_client_finality_update).
     */
    get: operations['getLightClientFinalityUpdate'];
  };
  '/eth/v1/beacon/light_client/optimistic_update': {
    /**
     * Requests the latest [`LightClientOptimisticUpdate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/sync-protocol.md#lightclientoptimisticupdate) known by the server.
     * Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.
     *
     * Servers SHOULD provide results as defined in [`create_light_client_optimistic_update`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/full-node.md#create_light_client_optimistic_update).
     */
    get: operations['getLightClientOptimisticUpdate'];
  };
  '/eth/v1/beacon/pool/attestations': {
    /** Retrieves attestations known by the node but not necessarily incorporated into any block */
    get: operations['getPoolAttestations'];
    /**
     * Submits Attestation objects to the node.  Each attestation in the request body is processed individually.
     *
     * If an attestation is validated successfully the node MUST publish that attestation on the appropriate subnet.
     *
     * If one or more attestations fail validation the node MUST return a 400 error with details of which attestations have failed, and why.
     */
    post: operations['submitPoolAttestations'];
  };
  '/eth/v2/beacon/pool/attestations': {
    /** Retrieves attestations known by the node but not necessarily incorporated into any block */
    get: operations['getPoolAttestationsV2'];
    /**
     * Submits attestations to the node. Each attestation in the request body is processed individually.
     *
     * If an attestation is validated successfully, the node MUST publish that attestation on the appropriate subnet.
     *
     * If one or more attestations fail validation, the node MUST return a 400 error with details of which attestations have failed, and why.
     */
    post: operations['submitPoolAttestationsV2'];
  };
  '/eth/v1/beacon/pool/attester_slashings': {
    /** Retrieves attester slashings known by the node but not necessarily incorporated into any block */
    get: operations['getPoolAttesterSlashings'];
    /** Submits AttesterSlashing object to node's pool and if passes validation node MUST broadcast it to network. */
    post: operations['submitPoolAttesterSlashings'];
  };
  '/eth/v2/beacon/pool/attester_slashings': {
    /** Retrieves attester slashings known by the node but not necessarily incorporated into any block */
    get: operations['getPoolAttesterSlashingsV2'];
    /** Submits AttesterSlashing object to node's pool. Upon successful validation the node MUST broadcast it to network. */
    post: operations['submitPoolAttesterSlashingsV2'];
  };
  '/eth/v1/beacon/pool/proposer_slashings': {
    /** Retrieves proposer slashings known by the node but not necessarily incorporated into any block */
    get: operations['getPoolProposerSlashings'];
    /** Submits ProposerSlashing object to node's pool and if passes validation  node MUST broadcast it to network. */
    post: operations['submitPoolProposerSlashings'];
  };
  '/eth/v1/beacon/pool/sync_committees': {
    /**
     * Submits sync committee signature objects to the node.
     *
     * Sync committee signatures are not present in phase0, but are required for Altair networks.
     *
     * If a sync committee signature is validated successfully the node MUST publish that sync committee signature on all applicable subnets.
     *
     * If one or more sync committee signatures fail validation the node MUST return a 400 error with details of which sync committee signatures have failed, and why.
     */
    post: operations['submitPoolSyncCommitteeSignatures'];
  };
  '/eth/v1/beacon/pool/voluntary_exits': {
    /** Retrieves voluntary exits known by the node but not necessarily incorporated into any block */
    get: operations['getPoolVoluntaryExits'];
    /** Submits SignedVoluntaryExit object to node's pool and if passes validation node MUST broadcast it to network. */
    post: operations['submitPoolVoluntaryExit'];
  };
  '/eth/v1/beacon/pool/bls_to_execution_changes': {
    /** Retrieves BLS to execution changes known by the node but not necessarily incorporated into any block */
    get: operations['getPoolBLSToExecutionChanges'];
    /** Submits a list of SignedBLSToExecutionChange objects to node's pool. Any that pass validation MUST be broadcast to the network. */
    post: operations['submitPoolBLSToExecutionChange'];
  };
  '/eth/v1/builder/states/{state_id}/expected_withdrawals': {
    /**
     * Get the withdrawals computed from the specified state, that will be included in the block
     * that gets built on the specified state.
     */
    get: operations['getNextWithdrawals'];
  };
  '/eth/v2/debug/beacon/states/{state_id}': {
    /**
     * Returns full BeaconState object for given stateId.
     * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
     */
    get: operations['getStateV2'];
  };
  '/eth/v2/debug/beacon/heads': {
    /** Retrieves all possible chain heads (leaves of fork choice tree). */
    get: operations['getDebugChainHeadsV2'];
  };
  '/eth/v1/debug/fork_choice': {
    /** Retrieves all current fork choice context. */
    get: operations['getDebugForkChoice'];
  };
  '/eth/v1/node/identity': {
    /** Retrieves data about the node's network presence */
    get: operations['getNetworkIdentity'];
  };
  '/eth/v1/node/peers': {
    /** Retrieves data about the node's network peers. By default this returns all peers. Multiple query params are combined using AND conditions */
    get: operations['getPeers'];
  };
  '/eth/v1/node/peers/{peer_id}': {
    /** Retrieves data about the given peer */
    get: operations['getPeer'];
  };
  '/eth/v1/node/peer_count': {
    /** Retrieves number of known peers. */
    get: operations['getPeerCount'];
  };
  '/eth/v1/node/version': {
    /** Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field. */
    get: operations['getNodeVersion'];
  };
  '/eth/v1/node/syncing': {
    /** Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to. */
    get: operations['getSyncingStatus'];
  };
  '/eth/v1/node/health': {
    /** Returns node health status in http status codes. Useful for load balancers. */
    get: operations['getHealth'];
  };
  '/eth/v1/config/fork_schedule': {
    /** Retrieve all forks, past present and future, of which this node is aware. */
    get: operations['getForkSchedule'];
  };
  '/eth/v1/config/spec': {
    /**
     * Retrieve specification configuration used on this node.  The configuration should include:
     *   - Constants for all hard forks known by the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#constants) and [altair](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#constants) values
     *   - Presets for all hard forks supplied to the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/v1.3.0/presets/mainnet/phase0.yaml) and [altair](https://github.com/ethereum/consensus-specs/blob/v1.3.0/presets/mainnet/altair.yaml) values
     *   - Configuration for the beacon node, for example the [mainnet](https://github.com/ethereum/consensus-specs/blob/v1.3.0/configs/mainnet.yaml) values
     *
     * Values are returned with following format:
     *   - any value starting with 0x in the spec is returned as a hex string
     *   - numeric values are returned as a quoted integer
     */
    get: operations['getSpec'];
  };
  '/eth/v1/config/deposit_contract': {
    /** Retrieve Eth1 deposit contract address and chain ID. */
    get: operations['getDepositContract'];
  };
  '/eth/v1/validator/duties/attester/{epoch}': {
    /**
     * Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch.
     * Duties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:
     * - event.previous_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`
     * - event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) + 1 == epoch`
     * - event.block otherwise
     *
     * The dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root in the case of underflow.
     */
    post: operations['getAttesterDuties'];
  };
  '/eth/v1/validator/duties/proposer/{epoch}': {
    /**
     * Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.
     * Duties should only need to be checked once per epoch, however a chain reorganization could occur that results in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:
     * - event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`
     * - event.block otherwise
     *
     * The dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in the case of underflow.
     */
    get: operations['getProposerDuties'];
  };
  '/eth/v1/validator/duties/sync/{epoch}': {
    /** Requests the beacon node to provide a set of sync committee duties for a particular epoch. */
    post: operations['getSyncCommitteeDuties'];
  };
  '/eth/v2/validator/blocks/{slot}': {
    /**
     * Requests a beacon node to produce a valid block, which can then be signed by a validator.
     *
     * Metadata in the response indicates the type of block produced, and the supported types of block
     * will be added to as forks progress.
     */
    get: operations['produceBlockV2'];
  };
  '/eth/v3/validator/blocks/{slot}': {
    /**
     * Requests a beacon node to produce a valid block, which can then be signed by a validator. The
     * returned block may be blinded or unblinded, depending on the current state of the network as
     * decided by the execution and beacon nodes.
     *
     * The beacon node must return an unblinded block if it obtains the execution payload from its
     * paired execution node. It must only return a blinded block if it obtains the execution payload
     * header from an MEV relay.
     *
     * Metadata in the response indicates the type of block produced, and the supported types of block
     * will be added to as forks progress.
     */
    get: operations['produceBlockV3'];
  };
  '/eth/v1/validator/blinded_blocks/{slot}': {
    /**
     * Requests a beacon node to produce a valid blinded block, which can then be signed by a validator.
     * A blinded block is a block with only a transactions root, rather than a full transactions list.
     *
     * Metadata in the response indicates the type of block produced, and the supported types of block
     * will be added to as forks progress.
     *
     * Before Bellatrix, this endpoint will return a `BeaconBlock`.
     */
    get: operations['produceBlindedBlock'];
  };
  '/eth/v1/validator/attestation_data': {
    /**
     * Requests that the beacon node produce an AttestationData.
     *
     * A 503 error must be returned if the block identified by the response
     * `beacon_block_root` is optimistic (i.e. the attestation attests to a block
     * that has not been fully verified by an execution engine).
     */
    get: operations['produceAttestationData'];
  };
  '/eth/v1/validator/aggregate_attestation': {
    /**
     * Aggregates all attestations matching given attestation data root and slot.
     *
     * A 503 error must be returned if the block identified by the response
     * `beacon_block_root` is optimistic (i.e. the aggregated attestation attests
     * to a block that has not been fully verified by an execution engine).
     *
     * A 404 error must be returned if no attestation is available for the requested
     * `attestation_data_root`.
     */
    get: operations['getAggregatedAttestation'];
  };
  '/eth/v2/validator/aggregate_attestation': {
    /**
     * Aggregates all attestations matching given attestation data root, slot and committee index.
     *
     * A 503 error must be returned if the block identified by the response
     * `beacon_block_root` is optimistic (i.e. the aggregated attestation attests
     * to a block that has not been fully verified by an execution engine).
     *
     * A 404 error must be returned if no attestation is available for the requested
     * `attestation_data_root`.
     */
    get: operations['getAggregatedAttestationV2'];
  };
  '/eth/v1/validator/aggregate_and_proofs': {
    /** Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic. */
    post: operations['publishAggregateAndProofs'];
  };
  '/eth/v2/validator/aggregate_and_proofs': {
    /** Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic. */
    post: operations['publishAggregateAndProofsV2'];
  };
  '/eth/v1/validator/beacon_committee_subscriptions': {
    /**
     * After beacon node receives this request,
     * search using discv5 for peers related to this subnet
     * and replace current peers with those ones if necessary
     * If validator `is_aggregator`, beacon node must:
     * - announce subnet topic subscription on gossipsub
     * - aggregate attestations received on that subnet
     */
    post: operations['prepareBeaconCommitteeSubnet'];
  };
  '/eth/v1/validator/sync_committee_subscriptions': {
    /**
     * Subscribe to a number of sync committee subnets
     *
     * Sync committees are not present in phase0, but are required for Altair networks.
     *
     * Subscribing to sync committee subnets is an action performed by VC to enable network participation in Altair networks, and only required if the VC has an active validator in an active sync committee.
     */
    post: operations['prepareSyncCommitteeSubnets'];
  };
  '/eth/v1/validator/beacon_committee_selections': {
    /**
     * This endpoint should be used by a validator client running as part of a distributed validator cluster, and is
     * implemented by a distributed validator middleware client. This endpoint is used to exchange partial
     * selection proofs for combined/aggregated selection proofs to allow a validator client
     * to correctly determine if any of its validators has been selected to perform an attestation aggregation duty in a slot.
     * Validator clients running in a distributed validator cluster must query this endpoint at the start of an epoch for the current and lookahead (next) epochs for
     * all validators that have attester duties in the current and lookahead epochs. Consensus clients need not support this
     * endpoint and may return a 501.
     */
    post: operations['submitBeaconCommitteeSelections'];
  };
  '/eth/v1/validator/sync_committee_contribution': {
    /**
     * Requests that the beacon node produce a sync committee contribution.
     *
     * A 503 error must be returned if the block identified by the response
     * `beacon_block_root` is optimistic (i.e. the sync committee contribution
     * refers to a block that has not been fully verified by an execution engine).
     *
     * A 404 error must be returned if no sync committee contribution is available
     * for the requested `beacon_block_root`.
     */
    get: operations['produceSyncCommitteeContribution'];
  };
  '/eth/v1/validator/sync_committee_selections': {
    /**
     * Submit sync committee selections to a DVT middleware client. It returns the threshold aggregated sync
     * committee selection. This endpoint should be used by a validator client running as part of a distributed
     * validator cluster, and is implemented by a distributed validator middleware client. This endpoint is
     * used to exchange partial selection proofs (slot signatures) for combined/aggregated selection proofs to
     * allow a validator client to correctly determine if any of its validators has been selected to perform a
     * sync committee contribution (sync aggregation) duty in a slot. Validator clients running in a distributed validator cluster must query this endpoint
     * at the start of each slot for all validators that are included in the current sync committee. Consensus
     * clients need not support this endpoint and may return a 501.
     */
    post: operations['submitSyncCommitteeSelections'];
  };
  '/eth/v1/validator/contribution_and_proofs': {
    /** Publish multiple signed sync committee contribution and proofs */
    post: operations['publishContributionAndProofs'];
  };
  '/eth/v1/validator/prepare_beacon_proposer': {
    /**
     * Prepares the beacon node for potential proposers by supplying information
     * required when proposing blocks for the given validators.  The information
     * supplied for each validator index will persist through the epoch in which
     * the call is submitted and for a further two epochs after that, or until the
     * beacon node restarts.  It is expected that validator clients will send this
     * information periodically, for example each epoch, to ensure beacon nodes have
     * correct and timely fee recipient information.
     *
     * Note that there is no guarantee that the beacon node will use the supplied fee
     * recipient when creating a block proposal, so on receipt of a proposed block the
     * validator should confirm that it finds the fee recipient within the block
     * acceptable before signing it.
     *
     * Also note that requests containing currently inactive or unknown validator
     * indices will be accepted, as they may become active at a later epoch.
     */
    post: operations['prepareBeaconProposer'];
  };
  '/eth/v1/validator/register_validator': {
    /**
     * Prepares the beacon node for engaging with external builders. The
     * information must be sent by the beacon node to the builder network. It is
     * expected that the validator client will send this information periodically
     * to ensure the beacon node has correct and timely registration information
     * to provide to builders.
     *
     * Note that only registrations for active or pending validators must be sent to the builder network.
     * Registrations for unknown or exited validators must be filtered out and not sent to the builder network.
     */
    post: operations['registerValidator'];
  };
  '/eth/v1/validator/liveness/{epoch}': {
    /** Requests the beacon node to indicate if a validator has been observed to be live in a given epoch. The beacon node might detect liveness by observing messages from the validator on the network, in the beacon chain, from its API or from any other source. A beacon node SHOULD support the current and previous epoch, however it MAY support earlier epoch. It is important to note that the values returned by the beacon node are not canonical; they are best-effort and based upon a subjective view of the network. A beacon node that was recently started or suffered a network partition may indicate that a validator is not live when it actually is. */
    post: operations['getLiveness'];
  };
  '/eth/v1/events': {
    /**
     * Provides endpoint to subscribe to beacon node Server-Sent-Events stream.
     * Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)
     * implementation to listen on those events.
     *
     * Servers _may_ send SSE comments beginning with `:` for any purpose, including to keep the
     * event stream connection alive in the presence of proxy servers.
     */
    get: operations['eventstream'];
  };
}

export interface components {
  schemas: {
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
    BeaconState: {
      /** @example 1 */
      genesis_time: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      genesis_validators_root: string;
      /** @example 1 */
      slot: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork: {
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version: string;
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        current_version: string;
        /** @example 1 */
        epoch: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        body_root: string;
      };
      /** @description Fixed length of 8192 items */
      block_roots: string[];
      /** @description Fixed length of 8192 items */
      state_roots: string[];
      /** @description Variable length list, maximum 16777216 items */
      historical_roots: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      };
      /** @description Fixed length of 1024 items */
      eth1_data_votes: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      }[];
      /** @example 1 */
      eth1_deposit_index: string;
      /** @description Variable length list, maximum 1099511627776 items */
      validators: {
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
        /**
         * Format: hex
         * @description Root of withdrawal credentials
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawal_credentials: string;
        /**
         * @description Balance at stake in Gwei.
         * @example 1
         */
        effective_balance: string;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed: boolean;
        /**
         * @description When criteria for activation were met.
         * @example 1
         */
        activation_eligibility_epoch: string;
        /**
         * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
         * @example 1
         */
        activation_epoch: string;
        /**
         * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
         * @example 1
         */
        exit_epoch: string;
        /**
         * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
         * @example 1
         */
        withdrawable_epoch: string;
      }[];
      /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
      balances: string[];
      /** @description Fixed length of 65536 items */
      randao_mixes: string[];
      /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
      slashings: string[];
      previous_epoch_attestations: {
        /**
         * Format: hex
         * @description Attester aggregation bits.
         * @example 0x01
         */
        aggregation_bits: string;
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data: {
          /** @example 1 */
          slot: string;
          /** @example 1 */
          index: string;
          /**
           * Format: hex
           * @description LMD GHOST vote.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          beacon_block_root: string;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          source: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          target: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
        };
        /** @example 1 */
        inclusion_delay: string;
        /** @example 1 */
        proposer_index: string;
      }[];
      current_epoch_attestations: {
        /**
         * Format: hex
         * @description Attester aggregation bits.
         * @example 0x01
         */
        aggregation_bits: string;
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data: {
          /** @example 1 */
          slot: string;
          /** @example 1 */
          index: string;
          /**
           * Format: hex
           * @description LMD GHOST vote.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          beacon_block_root: string;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          source: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          target: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
        };
        /** @example 1 */
        inclusion_delay: string;
        /** @example 1 */
        proposer_index: string;
      }[];
      /**
       * Format: hex
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
    };
    /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
    BeaconBlock: {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
      body: {
        /**
         * Format: hex
         * @description The RanDAO reveal value provided by the validator.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        randao_reveal: string;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      };
    };
    /**
     * @description Level of validation that must be applied to a block before it is broadcast.
     * @enum {string}
     */
    BroadcastValidation: 'gossip' | 'consensus' | 'consensus_and_equivocation';
    DepositSnapshotResponse: {
      finalized: string[];
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      deposit_root: string;
      /** @example 1 */
      deposit_count: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      execution_block_hash: string;
      /** @example 1 */
      execution_block_height: string;
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL spec. */
    SignedBeaconBlock: {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
        body: {
          /**
           * Format: hex
           * @description The RanDAO reveal value provided by the validator.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          randao_reveal: string;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
    SignedBeaconBlockHeader: {
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        body_root: string;
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    ValidatorResponse: {
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      index: string;
      /**
       * @description Current validator balance in gwei.
       * @example 1
       */
      balance: string;
      /**
       * @description Possible statuses:
       * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
       * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
       * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
       * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
       * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
       * - **exited_unslashed** - When validator has reached regular exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
       * - **exited_slashed** - When validator has reached regular exit epoch, but was slashed, have to wait for a longer withdrawal period.
       * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
       * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
       *
       * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
       *
       * @example active_ongoing
       * @enum {undefined}
       */
      status:
        | 'pending_initialized'
        | 'pending_queued'
        | 'active_ongoing'
        | 'active_exiting'
        | 'active_slashed'
        | 'exited_unslashed'
        | 'exited_slashed'
        | 'withdrawal_possible'
        | 'withdrawal_done';
      validator: {
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
        /**
         * Format: hex
         * @description Root of withdrawal credentials
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawal_credentials: string;
        /**
         * @description Balance at stake in Gwei.
         * @example 1
         */
        effective_balance: string;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed: boolean;
        /**
         * @description When criteria for activation were met.
         * @example 1
         */
        activation_eligibility_epoch: string;
        /**
         * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
         * @example 1
         */
        activation_epoch: string;
        /**
         * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
         * @example 1
         */
        exit_epoch: string;
        /**
         * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
         * @example 1
         */
        withdrawable_epoch: string;
      };
    };
    ValidatorBalanceResponse: {
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      index: string;
      /**
       * @description Current validator balance in gwei.
       * @example 1
       */
      balance: string;
    };
    ValidatorIdentityResponse: {
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      index: string;
      /**
       * Format: hex
       * @description Public key of validator.
       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
       */
      pubkey: string;
      /**
       * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
       * @example 1
       */
      activation_epoch: string;
    };
    /**
     * @description Possible statuses:
     * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
     * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
     * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
     * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
     * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
     * - **exited_unslashed** - When validator has reached regular exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
     * - **exited_slashed** - When validator has reached regular exit epoch, but was slashed, have to wait for a longer withdrawal period.
     * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
     * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
     *
     * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
     *
     * @example active_ongoing
     * @enum {undefined}
     */
    ValidatorStatus:
      | 'pending_initialized'
      | 'pending_queued'
      | 'active_ongoing'
      | 'active_exiting'
      | 'active_slashed'
      | 'exited_unslashed'
      | 'exited_slashed'
      | 'withdrawal_possible'
      | 'withdrawal_done';
    /** @description Group of validators assigned to attest at specific slot and that have the same committee index (shard in phase 1) */
    Committee: {
      /**
       * @description Committee index at a slot
       * @example 1
       */
      index: string;
      /** @example 1 */
      slot: string;
      /** @description List of validator indices assigned to this committee */
      validators: string[];
    };
    /** @description The [`AttesterSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attesterslashing) object from the CL spec. */
    AttesterSlashing: {
      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
      attestation_1: {
        /** @description Attesting validator indices */
        attesting_indices: string[];
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data: {
          /** @example 1 */
          slot: string;
          /** @example 1 */
          index: string;
          /**
           * Format: hex
           * @description LMD GHOST vote.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          beacon_block_root: string;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          source: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          target: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
        };
        /**
         * Format: hex
         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
      attestation_2: {
        /** @description Attesting validator indices */
        attesting_indices: string[];
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data: {
          /** @example 1 */
          slot: string;
          /** @example 1 */
          index: string;
          /**
           * Format: hex
           * @description LMD GHOST vote.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          beacon_block_root: string;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          source: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          target: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
        };
        /**
         * Format: hex
         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
    };
    /** @description The [`ProposerSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#proposerslashing) object from the CL spec. */
    ProposerSlashing: {
      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
      signed_header_1: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        message: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
      signed_header_2: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        message: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
    };
    /** @description The [`SignedVoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedvoluntaryexit) object from the CL spec. */
    SignedVoluntaryExit: {
      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
      message: {
        /**
         * @description Minimum epoch for processing exit.
         * @example 1
         */
        epoch: string;
        /**
         * @description Index of the exiting validator.
         * @example 1
         */
        validator_index: string;
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The [`SignedBLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#signedblstoexecutionchange) object from the CL spec. */
    SignedBLSToExecutionChange: {
      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
      message: {
        /**
         * @description Index of the validator for which credentials will be changed.
         * @example 1
         */
        validator_index: string;
        /**
         * Format: hex
         * @description Public key of existing credentials.
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        from_bls_pubkey: string;
        /**
         * Format: hex
         * @description Execution address to which the credentials will be changed.
         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
         */
        to_execution_address: string;
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    AttesterDuty: {
      /**
       * Format: hex
       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
       */
      pubkey: string;
      /**
       * @description Index of validator in validator registry
       * @example 1
       */
      validator_index: string;
      /**
       * @description The committee index
       * @example 1
       */
      committee_index: string;
      /**
       * @description Number of validators in committee
       * @example 1
       */
      committee_length: string;
      /**
       * @description Number of committees at the provided slot
       * @example 1
       */
      committees_at_slot: string;
      /**
       * @description Index of validator in committee
       * @example 1
       */
      validator_committee_index: string;
      /**
       * @description The slot at which the validator must attest.
       * @example 1
       */
      slot: string;
    };
    ProposerDuty: {
      /**
       * Format: hex
       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
       */
      pubkey: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      validator_index: string;
      /**
       * @description The slot at which the validator must propose block.
       * @example 1
       */
      slot: string;
    };
    'Altair.SyncDuty': {
      /**
       * Format: hex
       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
       */
      pubkey: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      validator_index: string;
      /** @description The indices of the validator in the sync committee. */
      validator_sync_committee_indices: string[];
    };
    /** @description The [`SignedAggregateAndProof`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/validator.md#signedaggregateandproof) object */
    SignedAggregateAndProof: {
      message: {
        /** @example 1 */
        aggregator_index: string;
        /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
        aggregate: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        };
      } & {
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        selection_proof: string;
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
    Attestation: {
      /**
       * Format: hex
       * @description Attester aggregation bits.
       * @example 0x01
       */
      aggregation_bits: string;
      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
      data: {
        /** @example 1 */
        slot: string;
        /** @example 1 */
        index: string;
        /**
         * Format: hex
         * @description LMD GHOST vote.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        beacon_block_root: string;
        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
        source: {
          /** @example 1 */
          epoch: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          root: string;
        };
        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
        target: {
          /** @example 1 */
          epoch: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          root: string;
        };
      };
      /**
       * Format: hex
       * @description BLS aggregate signature.
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
    AttestationData: {
      /** @example 1 */
      slot: string;
      /** @example 1 */
      index: string;
      /**
       * Format: hex
       * @description LMD GHOST vote.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      beacon_block_root: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      source: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      target: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
    };
    BeaconCommitteeSelection: {
      /**
       * @description Index of the validator
       * @example 1
       */
      validator_index: string;
      /**
       * @description The slot at which a validator is assigned to attest
       * @example 1
       */
      slot: string;
      /**
       * Format: hex
       * @description The `slot_signature` calculated by the validator for the upcoming attestation slot
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      selection_proof: string;
    };
    SyncCommitteeSelection: {
      /**
       * @description Index of the validator
       * @example 1
       */
      validator_index: string;
      /**
       * @description The slot at which validator is assigned to produce a sync committee contribution
       * @example 1
       */
      slot: string;
      /**
       * @description SubcommitteeIndex to which the validator is assigned
       * @example 1
       */
      subcommittee_index: string;
      /**
       * Format: hex
       * @description The `slot_signature` calculated by the validator for the upcoming sync committee slot
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      selection_proof: string;
    };
    /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
    Fork: {
      /**
       * Format: hex
       * @description a fork version number
       * @example 0x00000000
       */
      previous_version: string;
      /**
       * Format: hex
       * @description a fork version number
       * @example 0x00000000
       */
      current_version: string;
      /** @example 1 */
      epoch: string;
    };
    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
    Checkpoint: {
      /** @example 1 */
      epoch: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      root: string;
    };
    /** @example 1 */
    Uint64: string;
    NetworkIdentity: {
      /**
       * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
       * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
       */
      peer_id: string;
      /**
       * @description Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
       * @example enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8
       */
      enr: string;
      p2p_addresses: string[];
      discovery_addresses: string[];
      /** @description Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/p2p-interface.md#metadata) */
      metadata: {
        /**
         * @description Uint64 starting at 0 used to version the node's metadata. If any other field in the local MetaData changes, the node MUST increment seq_number by 1.
         * @example 1
         */
        seq_number: string;
        /**
         * Format: hex
         * @description Bitvector representing the node's persistent attestation subnet subscriptions.
         * @example 0x0000000000000000
         */
        attnets: string;
        /**
         * Format: hex
         * @description Bitvector representing the node's sync committee subnet subscriptions. This metadata is not present in phase0, but will be present in Altair.
         * @example 0x0f
         */
        syncnets?: string;
      };
    };
    Peer: {
      /**
       * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
       * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
       */
      peer_id: string;
      enr: unknown | string;
      /**
       * @description Multiaddrs used in last peer connection.
       * @example /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
       */
      last_seen_p2p_address: string;
      /** @enum {string} */
      state: 'disconnected' | 'connecting' | 'connected' | 'disconnecting';
      /** @enum {string} */
      direction: 'inbound' | 'outbound';
    };
    /**
     * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
     * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
     */
    PeerId: string;
    /** @enum {string} */
    PeerConnectionState:
      | 'disconnected'
      | 'connecting'
      | 'connected'
      | 'disconnecting';
    /** @enum {string} */
    PeerConnectionDirection: 'inbound' | 'outbound';
    /**
     * @description The genesis_time configured for the beacon node, which is the unix time in seconds at which the Eth2.0 chain began.
     * @example 1590832934
     */
    GenesisTime: string;
    /**
     * @description A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
     * @example Lighthouse/v0.1.5 (Linux x86_64)
     */
    Version: string;
    /**
     * Format: hex
     * @description a fork version number
     * @example 0x00000000
     */
    ForkVersion: string;
    /**
     * Format: hex
     * @description The block root that this response is dependent on.
     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
     */
    DependentRoot: string;
    /**
     * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
     * @example false
     */
    ExecutionOptimistic: boolean;
    /**
     * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
     * @example false
     */
    Finalized: boolean;
    /**
     * Format: hex
     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
     */
    Root: string;
    /**
     * Format: hex
     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
     */
    Graffiti: string;
    /**
     * Format: hex
     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
     */
    Signature: string;
    ErrorMessage: {
      /**
       * @description Either specific error code in case of invalid request or http status code
       * @example 404
       */
      code: number;
      /** @description Message describing error */
      message: string;
      /** @description Optional stacktraces, sent when node is in debug mode */
      stacktraces?: string[];
    };
    IndexedErrorMessage: {
      /**
       * @description Either specific error code in case of invalid request or http status code
       * @example 400
       */
      code: number;
      /**
       * @description Message describing error
       * @example some failures
       */
      message: string;
      /** @description List of individual items that have failed */
      failures: {
        /**
         * @description Index of item in the request list that caused the error
         * @example 3
         */
        index: number;
        /**
         * @description Message describing error
         * @example invalid signature
         */
        message: string;
      }[];
    };
    /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Altair spec. */
    'Altair.BeaconBlock': {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing Merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
      body: {
        /**
         * Format: hex
         * @description The RanDAO reveal value provided by the validator.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        randao_reveal: string;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate: {
          /**
           * Format: hex
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          sync_committee_signature: string;
        };
      };
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Altair spec. */
    'Altair.SignedBeaconBlock': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Altair spec. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
        body: {
          /**
           * Format: hex
           * @description The RanDAO reveal value provided by the validator.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          randao_reveal: string;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    'Altair.LightClientBootstrap': {
      header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
      };
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      current_sync_committee_branch: string[];
    };
    'Altair.LightClientUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee_branch: string[];
      finalized_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
      };
      finality_branch: string[];
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Altair.LightClientFinalityUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
      };
      finalized_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
      };
      finality_branch: string[];
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Altair.LightClientOptimisticUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
      };
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconstate) object from the CL Altair spec. */
    'Altair.BeaconState': {
      /** @example 1 */
      genesis_time: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      genesis_validators_root: string;
      /** @example 1 */
      slot: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork: {
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version: string;
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        current_version: string;
        /** @example 1 */
        epoch: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        body_root: string;
      };
      /** @description Fixed length of 8192 items */
      block_roots: string[];
      /** @description Fixed length of 8192 items */
      state_roots: string[];
      /** @description Variable length list, maximum 16777216 items */
      historical_roots: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      };
      /** @description Fixed length of 1024 items */
      eth1_data_votes: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      }[];
      /** @example 1 */
      eth1_deposit_index: string;
      /** @description Variable length list, maximum 1099511627776 items */
      validators: {
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
        /**
         * Format: hex
         * @description Root of withdrawal credentials
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawal_credentials: string;
        /**
         * @description Balance at stake in Gwei.
         * @example 1
         */
        effective_balance: string;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed: boolean;
        /**
         * @description When criteria for activation were met.
         * @example 1
         */
        activation_eligibility_epoch: string;
        /**
         * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
         * @example 1
         */
        activation_epoch: string;
        /**
         * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
         * @example 1
         */
        exit_epoch: string;
        /**
         * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
         * @example 1
         */
        withdrawable_epoch: string;
      }[];
      /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
      balances: string[];
      /** @description Fixed length of 65536 items */
      randao_mixes: string[];
      /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
      slashings: string[];
      previous_epoch_participation: string[];
      current_epoch_participation: string[];
      /**
       * Format: hex
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description Per-validator inactivity scores. New in Altair. Variable length list, maximum 1099511627776 items */
      inactivity_scores: string[];
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
    };
    'Altair.SyncCommitteeSignature': {
      /** @example 1 */
      slot: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      beacon_block_root: string;
      /** @example 1 */
      validator_index: string;
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    'Altair.SyncCommitteeSubscription': {
      /** @example 1 */
      validator_index: string;
      sync_committee_indices: string[];
      /**
       * @description The final epoch (exclusive value) that the specified validator requires the subscription for.
       * @example 1
       */
      until_epoch: string;
    };
    'Altair.ContributionAndProof': {
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      aggregator_index: string;
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      selection_proof: string;
      contribution: {
        /**
         * @description The slot at which the validator is providing a sync committee contribution.
         * @example 1
         */
        slot: string;
        /**
         * Format: hex
         * @description Block root for this contribution.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        beacon_block_root: string;
        /**
         * @description The index of the subcommittee that the contribution pertains to.
         * @example 1
         */
        subcommittee_index: string;
        /**
         * Format: hex
         * @description A bit is set if a signature from the validator at the corresponding index in the subcommittee is present in the aggregate `signature`.
         * @example 0xffffffffffffffffffffffffffffffff
         */
        aggregation_bits: string;
        /**
         * Format: hex
         * @description Signature by the validator(s) over the block root of `slot`
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
    };
    'Altair.SignedContributionAndProof': {
      message: {
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        aggregator_index: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        selection_proof: string;
        contribution: {
          /**
           * @description The slot at which the validator is providing a sync committee contribution.
           * @example 1
           */
          slot: string;
          /**
           * Format: hex
           * @description Block root for this contribution.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          beacon_block_root: string;
          /**
           * @description The index of the subcommittee that the contribution pertains to.
           * @example 1
           */
          subcommittee_index: string;
          /**
           * Format: hex
           * @description A bit is set if a signature from the validator at the corresponding index in the subcommittee is present in the aggregate `signature`.
           * @example 0xffffffffffffffffffffffffffffffff
           */
          aggregation_bits: string;
          /**
           * Format: hex
           * @description Signature by the validator(s) over the block root of `slot`
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    'Altair.SyncCommitteeContribution': {
      /**
       * @description The slot at which the validator is providing a sync committee contribution.
       * @example 1
       */
      slot: string;
      /**
       * Format: hex
       * @description Block root for this contribution.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      beacon_block_root: string;
      /**
       * @description The index of the subcommittee that the contribution pertains to.
       * @example 1
       */
      subcommittee_index: string;
      /**
       * Format: hex
       * @description A bit is set if a signature from the validator at the corresponding index in the subcommittee is present in the aggregate `signature`.
       * @example 0xffffffffffffffffffffffffffffffff
       */
      aggregation_bits: string;
      /**
       * Format: hex
       * @description Signature by the validator(s) over the block root of `slot`
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    'Altair.SyncCommittee': {
      /** @description all of the validator indices in the current sync committee */
      validators: string[];
      validator_aggregates: string[][];
    };
    /**
     * Format: hex
     * @description An address on the execution (Ethereum 1) network.
     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
     */
    ExecutionAddress: string;
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#beaconstate) object from the Eth2.0 Bellatrix spec. */
    'Bellatrix.BeaconState': {
      /** @example 1 */
      genesis_time: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      genesis_validators_root: string;
      /** @example 1 */
      slot: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork: {
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version: string;
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        current_version: string;
        /** @example 1 */
        epoch: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        body_root: string;
      };
      /** @description Fixed length of 8192 items */
      block_roots: string[];
      /** @description Fixed length of 8192 items */
      state_roots: string[];
      /** @description Variable length list, maximum 16777216 items */
      historical_roots: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      };
      /** @description Fixed length of 1024 items */
      eth1_data_votes: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      }[];
      /** @example 1 */
      eth1_deposit_index: string;
      /** @description Variable length list, maximum 1099511627776 items */
      validators: {
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
        /**
         * Format: hex
         * @description Root of withdrawal credentials
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawal_credentials: string;
        /**
         * @description Balance at stake in Gwei.
         * @example 1
         */
        effective_balance: string;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed: boolean;
        /**
         * @description When criteria for activation were met.
         * @example 1
         */
        activation_eligibility_epoch: string;
        /**
         * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
         * @example 1
         */
        activation_epoch: string;
        /**
         * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
         * @example 1
         */
        exit_epoch: string;
        /**
         * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
         * @example 1
         */
        withdrawable_epoch: string;
      }[];
      /** @description Validator balances in Gwei. Variable length list, maximum 1099511627776 items */
      balances: string[];
      /** @description Fixed length of 65536 items */
      randao_mixes: string[];
      /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
      slashings: string[];
      previous_epoch_participation: string[];
      current_epoch_participation: string[];
      /**
       * Format: hex
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description Per-validator inactivity scores. Introduced in Altair. Variable length list, maximum 1099511627776 items */
      inactivity_scores: string[];
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
      latest_execution_payload_header: {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_hash: string;
        /**
         * Format: hex
         * @description An address on the execution (Ethereum 1) network.
         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
         */
        fee_recipient: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        receipts_root: string;
        /**
         * Format: hex
         * @example 0x
         */
        logs_bloom: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        prev_randao: string;
        /** @example 1 */
        block_number: string;
        /** @example 1 */
        gas_limit: string;
        /** @example 1 */
        gas_used: string;
        /** @example 1 */
        timestamp: string;
        /**
         * Format: hex
         * @description Extra data on the execution (Ethereum 1) network.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        extra_data: string;
        /** @example 1 */
        base_fee_per_gas: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      } & {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        transactions_root: string;
      };
    };
    /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
    'Bellatrix.BeaconBlock': {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing Merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      body: {
        /**
         * Format: hex
         * @description The RanDAO reveal value provided by the validator.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        randao_reveal: string;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate: {
          /**
           * Format: hex
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          sync_committee_signature: string;
        };
      } & {
        execution_payload: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          transactions: string[];
        };
      };
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Bellatrix spec. */
    'Bellatrix.SignedBeaconBlock': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        body: {
          /**
           * Format: hex
           * @description The RanDAO reveal value provided by the validator.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          randao_reveal: string;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
        } & {
          execution_payload: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            transactions: string[];
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
    'Bellatrix.BlindedBeaconBlock': {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing Merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
      body: {
        /**
         * Format: hex
         * @description The RanDAO reveal value provided by the validator.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        randao_reveal: string;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate: {
          /**
           * Format: hex
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          sync_committee_signature: string;
        };
      } & {
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
        execution_payload_header: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
        };
      };
    };
    /** @description A variant of the [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Bellatrix spec, which contains a `BlindedBeaconBlock` rather than a `BeaconBlock`. */
    'Bellatrix.SignedBlindedBeaconBlock': {
      /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
        body: {
          /**
           * Format: hex
           * @description The RanDAO reveal value provided by the validator.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          randao_reveal: string;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
        } & {
          /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
          execution_payload_header: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            transactions_root: string;
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /**
     * @example phase0
     * @enum {string}
     */
    ConsensusVersion:
      | 'phase0'
      | 'altair'
      | 'bellatrix'
      | 'capella'
      | 'deneb'
      | 'electra';
    /** @description The `SignedValidatorRegistration` object from the Builder API specification. */
    SignedValidatorRegistration: {
      /** @description The `ValidatorRegistration` object from the Builder API specification. */
      message: {
        /**
         * Format: hex
         * @description Address to receive fees from the block.
         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
         */
        fee_recipient: string;
        /**
         * @description Preferred gas limit of validator.
         * @example 1
         */
        gas_limit: string;
        /**
         * @description Unix timestamp of registration.
         * @example 1
         */
        timestamp: string;
        /**
         * Format: hex
         * @description BLS public key of validator.
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#beaconstate) object from the Eth2.0 Capella spec. */
    'Capella.BeaconState': {
      /** @example 1 */
      genesis_time: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      genesis_validators_root: string;
      /** @example 1 */
      slot: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork: {
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version: string;
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        current_version: string;
        /** @example 1 */
        epoch: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        body_root: string;
      };
      /** @description Fixed length of 8192 items */
      block_roots: string[];
      /** @description Fixed length of 8192 items */
      state_roots: string[];
      /** @description Variable length list, maximum 16777216 items. Frozen in Capella, replaced by historical_summaries. */
      historical_roots: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      };
      /** @description Fixed length of 1024 items */
      eth1_data_votes: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      }[];
      /** @example 1 */
      eth1_deposit_index: string;
      /** @description Variable length list, maximum 1099511627776 items */
      validators: {
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
        /**
         * Format: hex
         * @description Root of withdrawal credentials
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawal_credentials: string;
        /**
         * @description Balance at stake in Gwei.
         * @example 1
         */
        effective_balance: string;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed: boolean;
        /**
         * @description When criteria for activation were met.
         * @example 1
         */
        activation_eligibility_epoch: string;
        /**
         * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
         * @example 1
         */
        activation_epoch: string;
        /**
         * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
         * @example 1
         */
        exit_epoch: string;
        /**
         * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
         * @example 1
         */
        withdrawable_epoch: string;
      }[];
      /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
      balances: string[];
      /** @description Fixed length of 65536 items */
      randao_mixes: string[];
      /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
      slashings: string[];
      previous_epoch_participation: string[];
      current_epoch_participation: string[];
      /**
       * Format: hex
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description Per-validator inactivity scores. Introduced in Altair. Variable length list, maximum 1099511627776 items */
      inactivity_scores: string[];
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
      latest_execution_payload_header: {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_hash: string;
        /**
         * Format: hex
         * @description An address on the execution (Ethereum 1) network.
         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
         */
        fee_recipient: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        receipts_root: string;
        /**
         * Format: hex
         * @example 0x
         */
        logs_bloom: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        prev_randao: string;
        /** @example 1 */
        block_number: string;
        /** @example 1 */
        gas_limit: string;
        /** @example 1 */
        gas_used: string;
        /** @example 1 */
        timestamp: string;
        /**
         * Format: hex
         * @description Extra data on the execution (Ethereum 1) network.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        extra_data: string;
        /** @example 1 */
        base_fee_per_gas: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      } & {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        transactions_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawals_root: string;
      };
      /** @example 1 */
      next_withdrawal_index: string;
      /** @example 1 */
      next_withdrawal_validator_index: string;
      /** @description Variable length list, maximum 16777216 items */
      historical_summaries: {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_summary_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_summary_root: string;
      }[];
    };
    /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec. */
    'Capella.BeaconBlock': {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing Merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      body: {
        /**
         * Format: hex
         * @description The RanDAO reveal value provided by the validator.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        randao_reveal: string;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate: {
          /**
           * Format: hex
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          sync_committee_signature: string;
        };
        bls_to_execution_changes: {
          /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
          message: {
            /**
             * @description Index of the validator for which credentials will be changed.
             * @example 1
             */
            validator_index: string;
            /**
             * Format: hex
             * @description Public key of existing credentials.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            from_bls_pubkey: string;
            /**
             * Format: hex
             * @description Execution address to which the credentials will be changed.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            to_execution_address: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      } & {
        execution_payload: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          transactions: string[];
          withdrawals: {
            /**
             * @description The index of the withdrawal.
             * @example 1
             */
            index: string;
            /**
             * @description The index of the withdrawing validator.
             * @example 1
             */
            validator_index: string;
            /**
             * Format: hex
             * @description The address to which the withdrawal is credited.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            address: string;
            /**
             * @description The value withdrawn (gwei).
             * @example 1
             */
            amount: string;
          }[];
        };
      };
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Capella spec. */
    'Capella.SignedBeaconBlock': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        body: {
          /**
           * Format: hex
           * @description The RanDAO reveal value provided by the validator.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          randao_reveal: string;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
          bls_to_execution_changes: {
            /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
            message: {
              /**
               * @description Index of the validator for which credentials will be changed.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description Public key of existing credentials.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              from_bls_pubkey: string;
              /**
               * Format: hex
               * @description Execution address to which the credentials will be changed.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              to_execution_address: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
        } & {
          execution_payload: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            transactions: string[];
            withdrawals: {
              /**
               * @description The index of the withdrawal.
               * @example 1
               */
              index: string;
              /**
               * @description The index of the withdrawing validator.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description The address to which the withdrawal is credited.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              address: string;
              /**
               * @description The value withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
    'Capella.BlindedBeaconBlock': {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing Merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#beaconblockbody) object from the CL Capella spec, which contains a transactions root rather than a full transactions list. */
      body: {
        /**
         * Format: hex
         * @description The RanDAO reveal value provided by the validator.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        randao_reveal: string;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate: {
          /**
           * Format: hex
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          sync_committee_signature: string;
        };
        bls_to_execution_changes: {
          /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
          message: {
            /**
             * @description Index of the validator for which credentials will be changed.
             * @example 1
             */
            validator_index: string;
            /**
             * Format: hex
             * @description Public key of existing credentials.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            from_bls_pubkey: string;
            /**
             * Format: hex
             * @description Execution address to which the credentials will be changed.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            to_execution_address: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      } & {
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
        execution_payload_header: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
      };
    };
    /** @description A variant of the [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Capella spec, which contains a `BlindedBeaconBlock` rather than a `BeaconBlock`. */
    'Capella.SignedBlindedBeaconBlock': {
      /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#beaconblockbody) object from the CL Capella spec, which contains a transactions root rather than a full transactions list. */
        body: {
          /**
           * Format: hex
           * @description The RanDAO reveal value provided by the validator.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          randao_reveal: string;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
          bls_to_execution_changes: {
            /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
            message: {
              /**
               * @description Index of the validator for which credentials will be changed.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description Public key of existing credentials.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              from_bls_pubkey: string;
              /**
               * Format: hex
               * @description Execution address to which the credentials will be changed.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              to_execution_address: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
        } & {
          /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
          execution_payload_header: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            transactions_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawals_root: string;
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    'Capella.LightClientBootstrap': {
      header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      current_sync_committee_branch: string[];
    };
    'Capella.LightClientUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee_branch: string[];
      finalized_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finality_branch: string[];
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Capella.LightClientFinalityUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finalized_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finality_branch: string[];
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Capella.LightClientOptimisticUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Capella.Withdrawal': {
      /**
       * @description The index of the withdrawal.
       * @example 1
       */
      index: string;
      /**
       * @description The index of the withdrawing validator.
       * @example 1
       */
      validator_index: string;
      /**
       * Format: hex
       * @description The address to which the withdrawal is credited.
       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
       */
      address: string;
      /**
       * @description The value withdrawn (gwei).
       * @example 1
       */
      amount: string;
    };
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#beaconstate) object from the Eth2.0 Deneb spec. */
    'Deneb.BeaconState': {
      /** @example 1 */
      genesis_time: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      genesis_validators_root: string;
      /** @example 1 */
      slot: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork: {
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version: string;
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        current_version: string;
        /** @example 1 */
        epoch: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        body_root: string;
      };
      /** @description Fixed length of 8192 items */
      block_roots: string[];
      /** @description Fixed length of 8192 items */
      state_roots: string[];
      /** @description Variable length list, maximum 16777216 items. Frozen in Capella, replaced by historical_summaries. */
      historical_roots: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      };
      /** @description Fixed length of 1024 items */
      eth1_data_votes: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      }[];
      /** @example 1 */
      eth1_deposit_index: string;
      /** @description Variable length list, maximum 1099511627776 items */
      validators: {
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
        /**
         * Format: hex
         * @description Root of withdrawal credentials
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawal_credentials: string;
        /**
         * @description Balance at stake in Gwei.
         * @example 1
         */
        effective_balance: string;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed: boolean;
        /**
         * @description When criteria for activation were met.
         * @example 1
         */
        activation_eligibility_epoch: string;
        /**
         * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
         * @example 1
         */
        activation_epoch: string;
        /**
         * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
         * @example 1
         */
        exit_epoch: string;
        /**
         * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
         * @example 1
         */
        withdrawable_epoch: string;
      }[];
      /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
      balances: string[];
      /** @description Fixed length of 65536 items */
      randao_mixes: string[];
      /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
      slashings: string[];
      previous_epoch_participation: string[];
      current_epoch_participation: string[];
      /**
       * Format: hex
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description Per-validator inactivity scores. Introduced in Altair. Variable length list, maximum 1099511627776 items */
      inactivity_scores: string[];
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
      latest_execution_payload_header: {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_hash: string;
        /**
         * Format: hex
         * @description An address on the execution (Ethereum 1) network.
         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
         */
        fee_recipient: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        receipts_root: string;
        /**
         * Format: hex
         * @example 0x
         */
        logs_bloom: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        prev_randao: string;
        /** @example 1 */
        block_number: string;
        /** @example 1 */
        gas_limit: string;
        /** @example 1 */
        gas_used: string;
        /** @example 1 */
        timestamp: string;
        /**
         * Format: hex
         * @description Extra data on the execution (Ethereum 1) network.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        extra_data: string;
        /** @example 1 */
        base_fee_per_gas: string;
        /** @example 1 */
        excess_blob_gas: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      } & {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        transactions_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawals_root: string;
      };
      /** @example 1 */
      next_withdrawal_index: string;
      /** @example 1 */
      next_withdrawal_validator_index: string;
      /** @description Variable length list, maximum 16777216 items */
      historical_summaries: {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_summary_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_summary_root: string;
      }[];
    };
    /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
    'Deneb.BeaconBlock': {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing Merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      body: {
        randao_reveal: string & unknown;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate: {
          /**
           * Format: hex
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          sync_committee_signature: string;
        };
        bls_to_execution_changes: {
          /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
          message: {
            /**
             * @description Index of the validator for which credentials will be changed.
             * @example 1
             */
            validator_index: string;
            /**
             * Format: hex
             * @description Public key of existing credentials.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            from_bls_pubkey: string;
            /**
             * Format: hex
             * @description Execution address to which the credentials will be changed.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            to_execution_address: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        blob_kzg_commitments: string[];
      } & {
        execution_payload: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          transactions: string[];
          withdrawals: {
            /**
             * @description The index of the withdrawal.
             * @example 1
             */
            index: string;
            /**
             * @description The index of the withdrawing validator.
             * @example 1
             */
            validator_index: string;
            /**
             * Format: hex
             * @description The address to which the withdrawal is credited.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            address: string;
            /**
             * @description The value withdrawn (gwei).
             * @example 1
             */
            amount: string;
          }[];
        };
      };
    };
    /** @description The required object for block production according to the Deneb CL spec. */
    'Deneb.BlockContents': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
      block: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        body: {
          randao_reveal: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
          bls_to_execution_changes: {
            /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
            message: {
              /**
               * @description Index of the validator for which credentials will be changed.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description Public key of existing credentials.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              from_bls_pubkey: string;
              /**
               * Format: hex
               * @description Execution address to which the credentials will be changed.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              to_execution_address: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          blob_kzg_commitments: string[];
        } & {
          execution_payload: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /** @example 1 */
            excess_blob_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            transactions: string[];
            withdrawals: {
              /**
               * @description The index of the withdrawal.
               * @example 1
               */
              index: string;
              /**
               * @description The index of the withdrawing validator.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description The address to which the withdrawal is credited.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              address: string;
              /**
               * @description The value withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
          };
        };
      };
      kzg_proofs: string[];
      blobs: string[];
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Deneb spec. */
    'Deneb.SignedBeaconBlock': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        body: {
          randao_reveal: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
          bls_to_execution_changes: {
            /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
            message: {
              /**
               * @description Index of the validator for which credentials will be changed.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description Public key of existing credentials.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              from_bls_pubkey: string;
              /**
               * Format: hex
               * @description Execution address to which the credentials will be changed.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              to_execution_address: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          blob_kzg_commitments: string[];
        } & {
          execution_payload: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /** @example 1 */
            excess_blob_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            transactions: string[];
            withdrawals: {
              /**
               * @description The index of the withdrawal.
               * @example 1
               */
              index: string;
              /**
               * @description The index of the withdrawing validator.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description The address to which the withdrawal is credited.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              address: string;
              /**
               * @description The value withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The required signed components of block production according to the Deneb CL spec. */
    'Deneb.SignedBlockContents': {
      /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Deneb spec. */
      signed_block: {
        /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
        message: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing Merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          body: {
            randao_reveal: string & unknown;
            /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
            eth1_data: {
              /**
               * Format: hex
               * @description Root of the deposit tree.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              deposit_root: string;
              /**
               * @description Total number of deposits.
               * @example 1
               */
              deposit_count: string;
              /**
               * Format: hex
               * @description Ethereum 1.x block hash.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              block_hash: string;
            };
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            graffiti: string;
            proposer_slashings: {
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_header_1: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_header_2: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
            attester_slashings: {
              /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
              attestation_1: {
                /** @description Attesting validator indices */
                attesting_indices: string[];
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
              /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
              attestation_2: {
                /** @description Attesting validator indices */
                attesting_indices: string[];
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
            attestations: {
              /**
               * Format: hex
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits: string;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description BLS aggregate signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
            deposits: {
              /** @description Branch in the deposit tree. */
              proof: string[];
              /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
              data: {
                /**
                 * Format: hex
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey: string;
                /**
                 * Format: hex
                 * @description The withdrawal credentials.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                withdrawal_credentials: string;
                /**
                 * @description Amount in Gwei.
                 * @example 1
                 */
                amount: string;
                /**
                 * Format: hex
                 * @description Container self-signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
            voluntary_exits: {
              /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
              message: {
                /**
                 * @description Minimum epoch for processing exit.
                 * @example 1
                 */
                epoch: string;
                /**
                 * @description Index of the exiting validator.
                 * @example 1
                 */
                validator_index: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
            /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
            sync_aggregate: {
              /**
               * Format: hex
               * @description Aggregation bits of sync
               * @example 0x01
               */
              sync_committee_bits: string;
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              sync_committee_signature: string;
            };
            bls_to_execution_changes: {
              /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
              message: {
                /**
                 * @description Index of the validator for which credentials will be changed.
                 * @example 1
                 */
                validator_index: string;
                /**
                 * Format: hex
                 * @description Public key of existing credentials.
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                from_bls_pubkey: string;
                /**
                 * Format: hex
                 * @description Execution address to which the credentials will be changed.
                 * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                 */
                to_execution_address: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
            blob_kzg_commitments: string[];
          } & {
            execution_payload: {
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_hash: string;
              /**
               * Format: hex
               * @description An address on the execution (Ethereum 1) network.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              fee_recipient: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              receipts_root: string;
              /**
               * Format: hex
               * @example 0x
               */
              logs_bloom: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              prev_randao: string;
              /** @example 1 */
              block_number: string;
              /** @example 1 */
              gas_limit: string;
              /** @example 1 */
              gas_used: string;
              /** @example 1 */
              timestamp: string;
              /**
               * Format: hex
               * @description Extra data on the execution (Ethereum 1) network.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              extra_data: string;
              /** @example 1 */
              base_fee_per_gas: string;
              /** @example 1 */
              excess_blob_gas: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              block_hash: string;
            } & {
              transactions: string[];
              withdrawals: {
                /**
                 * @description The index of the withdrawal.
                 * @example 1
                 */
                index: string;
                /**
                 * @description The index of the withdrawing validator.
                 * @example 1
                 */
                validator_index: string;
                /**
                 * Format: hex
                 * @description The address to which the withdrawal is credited.
                 * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                 */
                address: string;
                /**
                 * @description The value withdrawn (gwei).
                 * @example 1
                 */
                amount: string;
              }[];
            };
          };
        };
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
      kzg_proofs: string[];
      blobs: string[];
    };
    /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
    'Deneb.BlindedBeaconBlock': {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing Merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#beaconblockbody) object from the CL Deneb spec, which contains a transactions root rather than a full transactions list. */
      body: {
        randao_reveal: string & unknown;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate: {
          /**
           * Format: hex
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          sync_committee_signature: string;
        };
        bls_to_execution_changes: {
          /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
          message: {
            /**
             * @description Index of the validator for which credentials will be changed.
             * @example 1
             */
            validator_index: string;
            /**
             * Format: hex
             * @description Public key of existing credentials.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            from_bls_pubkey: string;
            /**
             * Format: hex
             * @description Execution address to which the credentials will be changed.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            to_execution_address: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        blob_kzg_commitments: string[];
      } & {
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution_payload_header: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
      };
    };
    /** @description A variant of the [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Deneb spec, which contains a `BlindedBeaconBlock` rather than a `BeaconBlock`. */
    'Deneb.SignedBlindedBeaconBlock': {
      /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#beaconblockbody) object from the CL Deneb spec, which contains a transactions root rather than a full transactions list. */
        body: {
          randao_reveal: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
          bls_to_execution_changes: {
            /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
            message: {
              /**
               * @description Index of the validator for which credentials will be changed.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description Public key of existing credentials.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              from_bls_pubkey: string;
              /**
               * Format: hex
               * @description Execution address to which the credentials will be changed.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              to_execution_address: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          blob_kzg_commitments: string[];
        } & {
          /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
          execution_payload_header: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /** @example 1 */
            excess_blob_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            transactions_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawals_root: string;
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    'Deneb.LightClientBootstrap': {
      header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      current_sync_committee_branch: string[];
    };
    'Deneb.LightClientUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee_branch: string[];
      finalized_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finality_branch: string[];
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Deneb.LightClientFinalityUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finalized_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finality_branch: string[];
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Deneb.LightClientOptimisticUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    /**
     * Format: hex
     * @description A blob is `FIELD_ELEMENTS_PER_BLOB * size_of(BLSFieldElement) = 4096 * 32 = 131072` bytes (`DATA`) representing a Blob as defined in Deneb
     */
    Blob: string;
    'Deneb.BlobSidecars': {
      /** @example 1 */
      index: string;
      /**
       * Format: hex
       * @description A blob is `FIELD_ELEMENTS_PER_BLOB * size_of(BLSFieldElement) = 4096 * 32 = 131072` bytes (`DATA`) representing a Blob as defined in Deneb
       */
      blob: string;
      /**
       * Format: hex
       * @description A G1 curve point. Same as BLS standard "is valid pubkey" check but also allows `0x00..00` for point-at-infinity
       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
       */
      kzg_commitment: string;
      /**
       * Format: hex
       * @description A G1 curve point. Used for verifying that the `KZGCommitment` for a given `Blob` is correct.
       */
      kzg_proof: string;
      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
      signed_block_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        message: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
      kzg_commitment_inclusion_proof: string[];
    }[];
    /** @description The [`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/electra/beacon-chain.md#beaconstate) object from the CL Electra spec. */
    'Electra.BeaconState': {
      /** @example 1 */
      genesis_time: string;
      /**
       * Format: hex
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      genesis_validators_root: string;
      /** @example 1 */
      slot: string;
      /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
      fork: {
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        previous_version: string;
        /**
         * Format: hex
         * @description a fork version number
         * @example 0x00000000
         */
        current_version: string;
        /** @example 1 */
        epoch: string;
      };
      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
      latest_block_header: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /**
         * Format: hex
         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        body_root: string;
      };
      /** @description Fixed length of 8192 items */
      block_roots: string[];
      /** @description Fixed length of 8192 items */
      state_roots: string[];
      /** @description Variable length list, maximum 16777216 items. Frozen in Capella, replaced by historical_summaries. */
      historical_roots: string[];
      /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
      eth1_data: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      };
      /** @description Fixed length of 1024 items */
      eth1_data_votes: {
        /**
         * Format: hex
         * @description Root of the deposit tree.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        deposit_root: string;
        /**
         * @description Total number of deposits.
         * @example 1
         */
        deposit_count: string;
        /**
         * Format: hex
         * @description Ethereum 1.x block hash.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      }[];
      /** @example 1 */
      eth1_deposit_index: string;
      /** @description Variable length list, maximum 1099511627776 items */
      validators: {
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
        /**
         * Format: hex
         * @description Root of withdrawal credentials
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawal_credentials: string;
        /**
         * @description Balance at stake in Gwei.
         * @example 1
         */
        effective_balance: string;
        /**
         * @description Was validator slashed (not longer active).
         * @example false
         */
        slashed: boolean;
        /**
         * @description When criteria for activation were met.
         * @example 1
         */
        activation_eligibility_epoch: string;
        /**
         * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
         * @example 1
         */
        activation_epoch: string;
        /**
         * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
         * @example 1
         */
        exit_epoch: string;
        /**
         * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
         * @example 1
         */
        withdrawable_epoch: string;
      }[];
      /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
      balances: string[];
      /** @description Fixed length of 65536 items */
      randao_mixes: string[];
      /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
      slashings: string[];
      previous_epoch_participation: string[];
      current_epoch_participation: string[];
      /**
       * Format: hex
       * @description Bit set for every recent justified epoch
       * @example 0x01
       */
      justification_bits: string;
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      previous_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      current_justified_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
      finalized_checkpoint: {
        /** @example 1 */
        epoch: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        root: string;
      };
      /** @description Per-validator inactivity scores. Introduced in Altair. Variable length list, maximum 1099511627776 items */
      inactivity_scores: string[];
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
      latest_execution_payload_header: {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_hash: string;
        /**
         * Format: hex
         * @description An address on the execution (Ethereum 1) network.
         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
         */
        fee_recipient: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        receipts_root: string;
        /**
         * Format: hex
         * @example 0x
         */
        logs_bloom: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        prev_randao: string;
        /** @example 1 */
        block_number: string;
        /** @example 1 */
        gas_limit: string;
        /** @example 1 */
        gas_used: string;
        /** @example 1 */
        timestamp: string;
        /**
         * Format: hex
         * @description Extra data on the execution (Ethereum 1) network.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        extra_data: string;
        /** @example 1 */
        base_fee_per_gas: string;
        /** @example 1 */
        excess_blob_gas: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_hash: string;
      } & {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        transactions_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawals_root: string;
      };
      /** @example 1 */
      next_withdrawal_index: string;
      /** @example 1 */
      next_withdrawal_validator_index: string;
      /** @description Variable length list, maximum 16777216 items */
      historical_summaries: {
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        block_summary_root: string;
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_summary_root: string;
      }[];
      /** @example 1 */
      deposit_requests_start_index: string;
      /** @example 1 */
      deposit_balance_to_consume: string;
      /** @example 1 */
      exit_balance_to_consume: string;
      /** @example 1 */
      earliest_exit_epoch: string;
      /** @example 1 */
      consolidation_balance_to_consume: string;
      /** @example 1 */
      earliest_consolidation_epoch: string;
      pending_deposits: {
        /**
         * Format: hex
         * @description BLS public key of validator.
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        pubkey: string;
        /**
         * Format: hex
         * @description The withdrawal credentials.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        withdrawal_credentials: string;
        /**
         * @description The value to be deposited (gwei).
         * @example 1
         */
        amount: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
        /**
         * @description The slot at which the deposit request was processed.
         * @example 1
         */
        slot: string;
      }[];
      pending_partial_withdrawals: {
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        index: string;
        /**
         * @description The value to be withdrawn (gwei).
         * @example 1
         */
        amount: string;
        /**
         * @description The epoch when the amount is withdrawable.
         * @example 1
         */
        withdrawable_epoch: string;
      }[];
      pending_consolidations: {
        /**
         * @description Index of validator to consolidate from.
         * @example 1
         */
        source_index: string;
        /**
         * @description Index of validator to consolidate to.
         * @example 1
         */
        target_index: string;
      }[];
    };
    /** @description The required object for block production according to the Electra CL spec. */
    'Electra.BlockContents': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec. */
      block: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        body: {
          randao_reveal: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
            /**
             * Format: hex
             * @description Committee bits.
             * @example 0x0000000000000001
             */
            committee_bits: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
          bls_to_execution_changes: {
            /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
            message: {
              /**
               * @description Index of the validator for which credentials will be changed.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description Public key of existing credentials.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              from_bls_pubkey: string;
              /**
               * Format: hex
               * @description Execution address to which the credentials will be changed.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              to_execution_address: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          blob_kzg_commitments: string[];
        } & {
          execution_payload: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /** @example 1 */
            excess_blob_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            transactions: string[];
            withdrawals: {
              /**
               * @description The index of the withdrawal.
               * @example 1
               */
              index: string;
              /**
               * @description The index of the withdrawing validator.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description The address to which the withdrawal is credited.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              address: string;
              /**
               * @description The value withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
          };
          /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
          execution_requests: {
            deposits: {
              /**
               * Format: hex
               * @description BLS public key of validator.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description The value to be deposited (gwei).
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
              /**
               * @description The index of the deposit request.
               * @example 1
               */
              index: string;
            }[];
            withdrawals: {
              /**
               * Format: hex
               * @description Execution address which sent the request.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              source_address: string;
              /**
               * Format: hex
               * @description BLS public key of validator.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              validator_pubkey: string;
              /**
               * @description The value to be withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
            consolidations: {
              /**
               * Format: hex
               * @description Execution address which sent the request.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              source_address: string;
              /**
               * Format: hex
               * @description BLS public key of validator to consolidate from.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              source_pubkey: string;
              /**
               * Format: hex
               * @description BLS public key of validator to consolidate to.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              target_pubkey: string;
            }[];
          };
        };
      };
      kzg_proofs: string[];
      blobs: string[];
    };
    /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Electra spec. */
    'Electra.SignedBeaconBlock': {
      /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        body: {
          randao_reveal: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
            /**
             * Format: hex
             * @description Committee bits.
             * @example 0x0000000000000001
             */
            committee_bits: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
          bls_to_execution_changes: {
            /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
            message: {
              /**
               * @description Index of the validator for which credentials will be changed.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description Public key of existing credentials.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              from_bls_pubkey: string;
              /**
               * Format: hex
               * @description Execution address to which the credentials will be changed.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              to_execution_address: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          blob_kzg_commitments: string[];
        } & {
          execution_payload: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /** @example 1 */
            excess_blob_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            transactions: string[];
            withdrawals: {
              /**
               * @description The index of the withdrawal.
               * @example 1
               */
              index: string;
              /**
               * @description The index of the withdrawing validator.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description The address to which the withdrawal is credited.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              address: string;
              /**
               * @description The value withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
          };
          /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
          execution_requests: {
            deposits: {
              /**
               * Format: hex
               * @description BLS public key of validator.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description The value to be deposited (gwei).
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
              /**
               * @description The index of the deposit request.
               * @example 1
               */
              index: string;
            }[];
            withdrawals: {
              /**
               * Format: hex
               * @description Execution address which sent the request.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              source_address: string;
              /**
               * Format: hex
               * @description BLS public key of validator.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              validator_pubkey: string;
              /**
               * @description The value to be withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
            consolidations: {
              /**
               * Format: hex
               * @description Execution address which sent the request.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              source_address: string;
              /**
               * Format: hex
               * @description BLS public key of validator to consolidate from.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              source_pubkey: string;
              /**
               * Format: hex
               * @description BLS public key of validator to consolidate to.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              target_pubkey: string;
            }[];
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The required signed components of block production according to the Electra CL spec. */
    'Electra.SignedBlockContents': {
      /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Electra spec. */
      signed_block: {
        /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec. */
        message: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing Merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          body: {
            randao_reveal: string & unknown;
            /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
            eth1_data: {
              /**
               * Format: hex
               * @description Root of the deposit tree.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              deposit_root: string;
              /**
               * @description Total number of deposits.
               * @example 1
               */
              deposit_count: string;
              /**
               * Format: hex
               * @description Ethereum 1.x block hash.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              block_hash: string;
            };
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            graffiti: string;
            proposer_slashings: {
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_header_1: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_header_2: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
            attester_slashings: {
              /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
              attestation_1: {
                /** @description Attesting validator indices */
                attesting_indices: string[];
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
              /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
              attestation_2: {
                /** @description Attesting validator indices */
                attesting_indices: string[];
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
            attestations: {
              /**
               * Format: hex
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits: string;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description BLS aggregate signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
              /**
               * Format: hex
               * @description Committee bits.
               * @example 0x0000000000000001
               */
              committee_bits: string;
            }[];
            deposits: {
              /** @description Branch in the deposit tree. */
              proof: string[];
              /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
              data: {
                /**
                 * Format: hex
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey: string;
                /**
                 * Format: hex
                 * @description The withdrawal credentials.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                withdrawal_credentials: string;
                /**
                 * @description Amount in Gwei.
                 * @example 1
                 */
                amount: string;
                /**
                 * Format: hex
                 * @description Container self-signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
            voluntary_exits: {
              /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
              message: {
                /**
                 * @description Minimum epoch for processing exit.
                 * @example 1
                 */
                epoch: string;
                /**
                 * @description Index of the exiting validator.
                 * @example 1
                 */
                validator_index: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
            /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
            sync_aggregate: {
              /**
               * Format: hex
               * @description Aggregation bits of sync
               * @example 0x01
               */
              sync_committee_bits: string;
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              sync_committee_signature: string;
            };
            bls_to_execution_changes: {
              /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
              message: {
                /**
                 * @description Index of the validator for which credentials will be changed.
                 * @example 1
                 */
                validator_index: string;
                /**
                 * Format: hex
                 * @description Public key of existing credentials.
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                from_bls_pubkey: string;
                /**
                 * Format: hex
                 * @description Execution address to which the credentials will be changed.
                 * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                 */
                to_execution_address: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
            blob_kzg_commitments: string[];
          } & {
            execution_payload: {
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_hash: string;
              /**
               * Format: hex
               * @description An address on the execution (Ethereum 1) network.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              fee_recipient: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              receipts_root: string;
              /**
               * Format: hex
               * @example 0x
               */
              logs_bloom: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              prev_randao: string;
              /** @example 1 */
              block_number: string;
              /** @example 1 */
              gas_limit: string;
              /** @example 1 */
              gas_used: string;
              /** @example 1 */
              timestamp: string;
              /**
               * Format: hex
               * @description Extra data on the execution (Ethereum 1) network.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              extra_data: string;
              /** @example 1 */
              base_fee_per_gas: string;
              /** @example 1 */
              excess_blob_gas: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              block_hash: string;
            } & {
              transactions: string[];
              withdrawals: {
                /**
                 * @description The index of the withdrawal.
                 * @example 1
                 */
                index: string;
                /**
                 * @description The index of the withdrawing validator.
                 * @example 1
                 */
                validator_index: string;
                /**
                 * Format: hex
                 * @description The address to which the withdrawal is credited.
                 * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                 */
                address: string;
                /**
                 * @description The value withdrawn (gwei).
                 * @example 1
                 */
                amount: string;
              }[];
            };
            /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
            execution_requests: {
              deposits: {
                /**
                 * Format: hex
                 * @description BLS public key of validator.
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey: string;
                /**
                 * Format: hex
                 * @description The withdrawal credentials.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                withdrawal_credentials: string;
                /**
                 * @description The value to be deposited (gwei).
                 * @example 1
                 */
                amount: string;
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
                /**
                 * @description The index of the deposit request.
                 * @example 1
                 */
                index: string;
              }[];
              withdrawals: {
                /**
                 * Format: hex
                 * @description Execution address which sent the request.
                 * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                 */
                source_address: string;
                /**
                 * Format: hex
                 * @description BLS public key of validator.
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                validator_pubkey: string;
                /**
                 * @description The value to be withdrawn (gwei).
                 * @example 1
                 */
                amount: string;
              }[];
              consolidations: {
                /**
                 * Format: hex
                 * @description Execution address which sent the request.
                 * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                 */
                source_address: string;
                /**
                 * Format: hex
                 * @description BLS public key of validator to consolidate from.
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                source_pubkey: string;
                /**
                 * Format: hex
                 * @description BLS public key of validator to consolidate to.
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                target_pubkey: string;
              }[];
            };
          };
        };
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
      kzg_proofs: string[];
      blobs: string[];
    };
    /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
    'Electra.BlindedBeaconBlock': {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * @description Index of validator in validator registry.
       * @example 1
       */
      proposer_index: string;
      /**
       * Format: hex
       * @description The signing Merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /**
       * Format: hex
       * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      state_root: string;
    } & {
      /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/electra/beacon-chain.md#beaconblockbody) object from the CL Electra spec, which contains a transactions root rather than a full transactions list. */
      body: {
        randao_reveal: string & unknown;
        /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
        eth1_data: {
          /**
           * Format: hex
           * @description Root of the deposit tree.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          deposit_root: string;
          /**
           * @description Total number of deposits.
           * @example 1
           */
          deposit_count: string;
          /**
           * Format: hex
           * @description Ethereum 1.x block hash.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        };
        /**
         * Format: hex
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        graffiti: string;
        proposer_slashings: {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attester_slashings: {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        attestations: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
          /**
           * Format: hex
           * @description Committee bits.
           * @example 0x0000000000000001
           */
          committee_bits: string;
        }[];
        deposits: {
          /** @description Branch in the deposit tree. */
          proof: string[];
          /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
          data: {
            /**
             * Format: hex
             * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description Amount in Gwei.
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @description Container self-signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }[];
        voluntary_exits: {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
        sync_aggregate: {
          /**
           * Format: hex
           * @description Aggregation bits of sync
           * @example 0x01
           */
          sync_committee_bits: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          sync_committee_signature: string;
        };
        bls_to_execution_changes: {
          /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
          message: {
            /**
             * @description Index of the validator for which credentials will be changed.
             * @example 1
             */
            validator_index: string;
            /**
             * Format: hex
             * @description Public key of existing credentials.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            from_bls_pubkey: string;
            /**
             * Format: hex
             * @description Execution address to which the credentials will be changed.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            to_execution_address: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
        blob_kzg_commitments: string[];
      } & {
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution_payload_header: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
        execution_requests: {
          deposits: {
            /**
             * Format: hex
             * @description BLS public key of validator.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
            /**
             * Format: hex
             * @description The withdrawal credentials.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawal_credentials: string;
            /**
             * @description The value to be deposited (gwei).
             * @example 1
             */
            amount: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
            /**
             * @description The index of the deposit request.
             * @example 1
             */
            index: string;
          }[];
          withdrawals: {
            /**
             * Format: hex
             * @description Execution address which sent the request.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            source_address: string;
            /**
             * Format: hex
             * @description BLS public key of validator.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            validator_pubkey: string;
            /**
             * @description The value to be withdrawn (gwei).
             * @example 1
             */
            amount: string;
          }[];
          consolidations: {
            /**
             * Format: hex
             * @description Execution address which sent the request.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            source_address: string;
            /**
             * Format: hex
             * @description BLS public key of validator to consolidate from.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            source_pubkey: string;
            /**
             * Format: hex
             * @description BLS public key of validator to consolidate to.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            target_pubkey: string;
          }[];
        };
      };
    };
    /** @description A variant of the [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Electra spec, which contains a `BlindedBeaconBlock` rather than a `BeaconBlock`. */
    'Electra.SignedBlindedBeaconBlock': {
      /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
      message: {
        /**
         * @description The slot to which this block corresponds.
         * @example 1
         */
        slot: string;
        /**
         * @description Index of validator in validator registry.
         * @example 1
         */
        proposer_index: string;
        /**
         * Format: hex
         * @description The signing Merkle root of the parent `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        parent_root: string;
        /**
         * Format: hex
         * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        state_root: string;
      } & {
        /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/electra/beacon-chain.md#beaconblockbody) object from the CL Electra spec, which contains a transactions root rather than a full transactions list. */
        body: {
          randao_reveal: string & unknown;
          /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
          eth1_data: {
            /**
             * Format: hex
             * @description Root of the deposit tree.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            deposit_root: string;
            /**
             * @description Total number of deposits.
             * @example 1
             */
            deposit_count: string;
            /**
             * Format: hex
             * @description Ethereum 1.x block hash.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          };
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          graffiti: string;
          proposer_slashings: {
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_1: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
            signed_header_2: {
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attester_slashings: {
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          attestations: {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
            /**
             * Format: hex
             * @description Committee bits.
             * @example 0x0000000000000001
             */
            committee_bits: string;
          }[];
          deposits: {
            /** @description Branch in the deposit tree. */
            proof: string[];
            /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description Amount in Gwei.
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @description Container self-signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }[];
          voluntary_exits: {
            /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
            message: {
              /**
               * @description Minimum epoch for processing exit.
               * @example 1
               */
              epoch: string;
              /**
               * @description Index of the exiting validator.
               * @example 1
               */
              validator_index: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
          sync_aggregate: {
            /**
             * Format: hex
             * @description Aggregation bits of sync
             * @example 0x01
             */
            sync_committee_bits: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            sync_committee_signature: string;
          };
          bls_to_execution_changes: {
            /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
            message: {
              /**
               * @description Index of the validator for which credentials will be changed.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description Public key of existing credentials.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              from_bls_pubkey: string;
              /**
               * Format: hex
               * @description Execution address to which the credentials will be changed.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              to_execution_address: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[];
          blob_kzg_commitments: string[];
        } & {
          /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
          execution_payload_header: {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_hash: string;
            /**
             * Format: hex
             * @description An address on the execution (Ethereum 1) network.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            receipts_root: string;
            /**
             * Format: hex
             * @example 0x
             */
            logs_bloom: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            prev_randao: string;
            /** @example 1 */
            block_number: string;
            /** @example 1 */
            gas_limit: string;
            /** @example 1 */
            gas_used: string;
            /** @example 1 */
            timestamp: string;
            /**
             * Format: hex
             * @description Extra data on the execution (Ethereum 1) network.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            extra_data: string;
            /** @example 1 */
            base_fee_per_gas: string;
            /** @example 1 */
            excess_blob_gas: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            block_hash: string;
          } & {
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            transactions_root: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            withdrawals_root: string;
          };
          /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
          execution_requests: {
            deposits: {
              /**
               * Format: hex
               * @description BLS public key of validator.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * Format: hex
               * @description The withdrawal credentials.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              withdrawal_credentials: string;
              /**
               * @description The value to be deposited (gwei).
               * @example 1
               */
              amount: string;
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
              /**
               * @description The index of the deposit request.
               * @example 1
               */
              index: string;
            }[];
            withdrawals: {
              /**
               * Format: hex
               * @description Execution address which sent the request.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              source_address: string;
              /**
               * Format: hex
               * @description BLS public key of validator.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              validator_pubkey: string;
              /**
               * @description The value to be withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
            consolidations: {
              /**
               * Format: hex
               * @description Execution address which sent the request.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              source_address: string;
              /**
               * Format: hex
               * @description BLS public key of validator to consolidate from.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              source_pubkey: string;
              /**
               * Format: hex
               * @description BLS public key of validator to consolidate to.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              target_pubkey: string;
            }[];
          };
        };
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#attestation) object from the CL spec. */
    'Electra.Attestation': {
      /**
       * Format: hex
       * @description Attester aggregation bits.
       * @example 0x01
       */
      aggregation_bits: string;
      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
      data: {
        /** @example 1 */
        slot: string;
        /** @example 1 */
        index: string;
        /**
         * Format: hex
         * @description LMD GHOST vote.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        beacon_block_root: string;
        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
        source: {
          /** @example 1 */
          epoch: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          root: string;
        };
        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
        target: {
          /** @example 1 */
          epoch: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          root: string;
        };
      };
      /**
       * Format: hex
       * @description BLS aggregate signature.
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
      /**
       * Format: hex
       * @description Committee bits.
       * @example 0x0000000000000001
       */
      committee_bits: string;
    };
    /** @description The [`SingleAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.9/specs/electra/beacon-chain.md#singleattestation) object from the CL spec. */
    'Electra.SingleAttestation': {
      /**
       * @description The attestations committee index.
       * @example 1
       */
      committee_index: string;
      /**
       * @description The validator index that signed this attestation.
       * @example 1
       */
      attester_index: string;
      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
      data: {
        /** @example 1 */
        slot: string;
        /** @example 1 */
        index: string;
        /**
         * Format: hex
         * @description LMD GHOST vote.
         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
         */
        beacon_block_root: string;
        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
        source: {
          /** @example 1 */
          epoch: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          root: string;
        };
        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
        target: {
          /** @example 1 */
          epoch: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          root: string;
        };
      };
      /**
       * Format: hex
       * @description BLS aggregate signature.
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    /** @description The [`AttesterSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#attesterslashing) object from the CL spec. */
    'Electra.AttesterSlashing': {
      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
      attestation_1: {
        /** @description Attesting validator indices */
        attesting_indices: string[];
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data: {
          /** @example 1 */
          slot: string;
          /** @example 1 */
          index: string;
          /**
           * Format: hex
           * @description LMD GHOST vote.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          beacon_block_root: string;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          source: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          target: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
        };
        /**
         * Format: hex
         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
      attestation_2: {
        /** @description Attesting validator indices */
        attesting_indices: string[];
        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
        data: {
          /** @example 1 */
          slot: string;
          /** @example 1 */
          index: string;
          /**
           * Format: hex
           * @description LMD GHOST vote.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          beacon_block_root: string;
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          source: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
          target: {
            /** @example 1 */
            epoch: string;
            /**
             * Format: hex
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            root: string;
          };
        };
        /**
         * Format: hex
         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        signature: string;
      };
    };
    /** @description The [`SignedAggregateAndProof`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/validator.md#signedaggregateandproof) object */
    'Electra.SignedAggregateAndProof': {
      message: {
        /** @example 1 */
        aggregator_index: string;
        /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#attestation) object from the CL spec. */
        aggregate: {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
          /**
           * Format: hex
           * @description Committee bits.
           * @example 0x0000000000000001
           */
          committee_bits: string;
        };
      } & {
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        selection_proof: string;
      };
      /**
       * Format: hex
       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
       */
      signature: string;
    };
    'Electra.LightClientBootstrap': {
      header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      current_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      current_sync_committee_branch: string[];
    };
    'Electra.LightClientUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      next_sync_committee: {
        pubkeys: string[];
        /**
         * Format: hex
         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
         */
        aggregate_pubkey: string;
      };
      next_sync_committee_branch: string[];
      finalized_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finality_branch: string[];
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Electra.LightClientFinalityUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finalized_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      finality_branch: string[];
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    'Electra.LightClientOptimisticUpdate': {
      attested_header: {
        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
        beacon: {
          /**
           * @description The slot to which this block corresponds.
           * @example 1
           */
          slot: string;
          /**
           * @description Index of validator in validator registry.
           * @example 1
           */
          proposer_index: string;
          /**
           * Format: hex
           * @description The signing merkle root of the parent `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_root: string;
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
        } & {
          /**
           * Format: hex
           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          body_root: string;
        };
        /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
        execution: {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          parent_hash: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          state_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          receipts_root: string;
          /**
           * Format: hex
           * @example 0x
           */
          logs_bloom: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          prev_randao: string;
          /** @example 1 */
          block_number: string;
          /** @example 1 */
          gas_limit: string;
          /** @example 1 */
          gas_used: string;
          /** @example 1 */
          timestamp: string;
          /**
           * Format: hex
           * @description Extra data on the execution (Ethereum 1) network.
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          extra_data: string;
          /** @example 1 */
          base_fee_per_gas: string;
          /** @example 1 */
          excess_blob_gas: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          block_hash: string;
        } & {
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          transactions_root: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          withdrawals_root: string;
        };
        execution_branch: string[];
      };
      /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
      sync_aggregate: {
        /**
         * Format: hex
         * @description Aggregation bits of sync
         * @example 0x01
         */
        sync_committee_bits: string;
        /**
         * Format: hex
         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
         */
        sync_committee_signature: string;
      };
      /** @example 1 */
      signature_slot: string;
    };
    /** @description fork choice node attributes */
    Node: {
      /**
       * @description The slot to which this block corresponds.
       * @example 1
       */
      slot: string;
      /**
       * Format: hex
       * @description The signing merkle root of the `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      block_root: string;
      /**
       * Format: hex
       * @description The signing merkle root of the parent `BeaconBlock`.
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      parent_root: string;
      /** @example 1 */
      justified_epoch: string;
      /** @example 1 */
      finalized_epoch: string;
      /** @example 1 */
      weight: string;
      /** @enum {string} */
      validity: 'valid' | 'invalid' | 'optimistic';
      /**
       * Format: hex
       * @description The `block_hash` from the `execution_payload` of the `BeaconBlock`
       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
       */
      execution_block_hash: string;
      /** @description Optional extra data that clients may provide, which could differ from client to client. */
      extra_data?: { [key: string]: unknown };
    };
    /** @description Optional extra data that clients may provide, which could differ from client to client. */
    ExtraData: { [key: string]: unknown };
    /** @description Rewards info for sync committee members */
    SyncCommitteeRewards: {
      /**
       * @description one entry for every validator participating in the sync committee
       * @example 0
       */
      validator_index: string;
      /**
       * @description sync committee reward in gwei for the validator
       * @example 2000
       */
      reward: string;
    }[];
    /** @description Rewards info for a single block */
    BlockRewards: {
      /**
       * @description proposer of the block, the proposer index who receives these rewards
       * @example 123
       */
      proposer_index: string;
      /**
       * @description total block reward in gwei, equal to attestations + sync_aggregate + proposer_slashings + attester_slashings
       * @example 123
       */
      total: string;
      /**
       * @description block reward component due to included attestations in gwei
       * @example 123
       */
      attestations: string;
      /**
       * @description block reward component due to included sync_aggregate in gwei
       * @example 123
       */
      sync_aggregate: string;
      /**
       * @description block reward component due to included proposer_slashings in gwei
       * @example 123
       */
      proposer_slashings: string;
      /**
       * @description block reward component due to included attester_slashings in gwei
       * @example 123
       */
      attester_slashings: string;
    };
    /** @description Rewards info for attestations */
    AttestationsRewards: {
      ideal_rewards: {
        /**
         * @description validator's effective balance in gwei
         * @example 1000000000
         */
        effective_balance: string;
        /**
         * @description Ideal attester's reward for head vote in gwei
         * @example 2500
         */
        head: string;
        /**
         * @description Ideal attester's reward for target vote in gwei
         * @example 5000
         */
        target: string;
        /**
         * @description Ideal attester's reward for source vote in gwei
         * @example 5000
         */
        source: string;
        /**
         * @description Ideal attester's inclusion_delay reward in gwei (phase0 only)
         * @example 5000
         */
        inclusion_delay?: string;
        /**
         * @description Ideal attester's inactivity penalty in gwei
         * @example 5000
         */
        inactivity: string;
      }[];
      total_rewards: {
        /**
         * @description one entry for every validator based on their attestations in the epoch
         * @example 0
         */
        validator_index: string;
        /**
         * @description attester's reward for head vote in gwei
         * @example 2000
         */
        head: string;
        /**
         * @description attester's reward for target vote in gwei
         * @example 2000
         */
        target: string;
        /**
         * @description attester's reward for source vote in gwei
         * @example 4000
         */
        source: string;
        /**
         * @description attester's inclusion_delay reward in gwei (phase0 only)
         * @example 2000
         */
        inclusion_delay?: string;
        /**
         * @description attester's inactivity penalty in gwei
         * @example 2000
         */
        inactivity: string;
      }[];
    };
  };
  responses: {
    /** Invalid request syntax. */
    InvalidRequest: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 400
           */
          code: number;
          /** @description Message describing error */
          message: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Not found */
    NotFound: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 404
           */
          code: number;
          /** @description Message describing error */
          message: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Accepted media type is not supported. */
    NotAcceptable: {
      content: {
        'application/json': {
          /**
           * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
           * @example 406
           */
          code: number;
          /** @description Message describing error */
          message: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Supplied content-type is not supported. */
    UnsupportedMediaType: {
      content: {
        'application/json': {
          /**
           * @description The media type in "Content-Type" header is unsupported, and the request has been rejected. This occurs when a HTTP request supplies a payload in a content-type that the server is not able to handle.
           * @example 415
           */
          code: number;
          /** @description Message describing error */
          message: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Beacon node internal error. */
    InternalError: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 404
           */
          code: number;
          /** @description Message describing error */
          message: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Endpoint not implemented. */
    NotImplementedError: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 501
           */
          code: number;
          /** @description Message describing error */
          message: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
    /** Beacon node is currently syncing, try again later. */
    CurrentlySyncing: {
      content: {
        'application/json': {
          /**
           * @description Either specific error code in case of invalid request or http status code
           * @example 404
           */
          code: number;
          /** @description Message describing error */
          message: string;
          /** @description Optional stacktraces, sent when node is in debug mode */
          stacktraces?: string[];
        };
      };
    };
  };
  parameters: {
    /**
     * @description State identifier.
     * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
     *
     * @example head
     */
    StateId: string;
    /**
     * @description Block identifier.
     * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
     *
     * @example head
     */
    BlockId: string;
    /**
     * @description Block root.
     * \<hex encoded blockRoot with 0x prefix\>.
     */
    BlockRoot: string;
    /**
     * @description Skip verification of the `randao_reveal` value. If this flag is set then the
     * `randao_reveal` must be set to the point at infinity (`0xc0..00`).
     */
    SkipRandaoVerification: string;
  };
  headers: {
    /**
     * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
     * more effectively.
     */
    'Eth-Consensus-Version':
      | 'phase0'
      | 'altair'
      | 'bellatrix'
      | 'capella'
      | 'deneb'
      | 'electra';
    /** Required in response so client can deserialize returned json or ssz data to the correct object. */
    'Eth-Execution-Payload-Blinded': boolean;
    /**
     * Execution payload value in Wei. Required in response so client can determine relative value
     * of execution payloads.
     */
    'Eth-Execution-Payload-Value': string;
    /**
     * Consensus rewards paid to the proposer for this block, in Wei. Required in response so
     * client can determine relative value of consensus blocks.
     */
    'Eth-Consensus-Block-Value': string;
  };
}

export interface operations {
  /** Retrieve details of the chain's genesis which can be used to identify chain. */
  getGenesis: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description The genesis_time configured for the beacon node, which is the unix time in seconds at which the Eth2.0 chain began.
               * @example 1590832934
               */
              genesis_time: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              genesis_validators_root: string;
              /**
               * Format: hex
               * @description a fork version number
               * @example 0x00000000
               */
              genesis_fork_version: string;
            };
          };
        };
      };
      /** Chain genesis info is not yet known */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Calculates HashTreeRoot for state with given 'stateId'. If stateId is root, same value will be returned. */
  getStateRoot: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * Format: hex
               * @description HashTreeRoot of BeaconState object
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Returns [Fork](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object for state with given 'stateId'. */
  getStateFork: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description a fork version number
               * @example 0x00000000
               */
              previous_version: string;
              /**
               * Format: hex
               * @description a fork version number
               * @example 0x00000000
               */
              current_version: string;
              /** @example 1 */
              epoch: string;
            };
          };
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns finality checkpoints for state with given 'stateId'.
   * In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.
   */
  getStateFinalityCheckpoints: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              previous_justified: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              current_justified: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              finalized: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
          };
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns filterable list of validators with their balance, status and index.
   *
   * Information will be returned for all indices or public key that match known validators.  If an index or public key does not
   * match any known validator, no information will be returned but this will not cause an error.  There are no guarantees for the
   * returned data in terms of ordering; both the index and public key are returned for each validator, and can be used to confirm
   * for which inputs a response has been returned.
   */
  getStateValidators: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Either hex encoded public key (any bytes48 with 0x prefix) or validator index */
        id?: string[];
        /** [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ) */
        status?: (
          | (
              | 'pending_initialized'
              | 'pending_queued'
              | 'active_ongoing'
              | 'active_exiting'
              | 'active_slashed'
              | 'exited_unslashed'
              | 'exited_slashed'
              | 'withdrawal_possible'
              | 'withdrawal_done'
            )
          | ('active' | 'pending' | 'exited' | 'withdrawal')
        )[];
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              index: string;
              /**
               * @description Current validator balance in gwei.
               * @example 1
               */
              balance: string;
              /**
               * @description Possible statuses:
               * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
               * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
               * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
               * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
               * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
               * - **exited_unslashed** - When validator has reached regular exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
               * - **exited_slashed** - When validator has reached regular exit epoch, but was slashed, have to wait for a longer withdrawal period.
               * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
               * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
               *
               * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
               *
               * @example active_ongoing
               * @enum {undefined}
               */
              status:
                | 'pending_initialized'
                | 'pending_queued'
                | 'active_ongoing'
                | 'active_exiting'
                | 'active_slashed'
                | 'exited_unslashed'
                | 'exited_slashed'
                | 'withdrawal_possible'
                | 'withdrawal_done';
              validator: {
                /**
                 * Format: hex
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey: string;
                /**
                 * Format: hex
                 * @description Root of withdrawal credentials
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                withdrawal_credentials: string;
                /**
                 * @description Balance at stake in Gwei.
                 * @example 1
                 */
                effective_balance: string;
                /**
                 * @description Was validator slashed (not longer active).
                 * @example false
                 */
                slashed: boolean;
                /**
                 * @description When criteria for activation were met.
                 * @example 1
                 */
                activation_eligibility_epoch: string;
                /**
                 * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                 * @example 1
                 */
                activation_epoch: string;
                /**
                 * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                 * @example 1
                 */
                exit_epoch: string;
                /**
                 * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                 * @example 1
                 */
                withdrawable_epoch: string;
              };
            }[];
          };
        };
      };
      /** Invalid state or validator ID, or status */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Too many validator IDs */
      414: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns filterable list of validators with their balance, status and index.
   *
   * Information will be returned for all indices or public key that match known validators.  If an index or public key does not
   * match any known validator, no information will be returned but this will not cause an error.  There are no guarantees for the
   * returned data in terms of ordering; both the index and public key are returned for each validator, and can be used to confirm
   * for which inputs a response has been returned.
   *
   * The POST variant of this endpoint has the same semantics as the GET endpoint but passes
   * the lists of IDs and statuses via a POST body in order to enable larger requests.
   */
  postStateValidators: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              index: string;
              /**
               * @description Current validator balance in gwei.
               * @example 1
               */
              balance: string;
              /**
               * @description Possible statuses:
               * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
               * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
               * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
               * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
               * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
               * - **exited_unslashed** - When validator has reached regular exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
               * - **exited_slashed** - When validator has reached regular exit epoch, but was slashed, have to wait for a longer withdrawal period.
               * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
               * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
               *
               * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
               *
               * @example active_ongoing
               * @enum {undefined}
               */
              status:
                | 'pending_initialized'
                | 'pending_queued'
                | 'active_ongoing'
                | 'active_exiting'
                | 'active_slashed'
                | 'exited_unslashed'
                | 'exited_slashed'
                | 'withdrawal_possible'
                | 'withdrawal_done';
              validator: {
                /**
                 * Format: hex
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey: string;
                /**
                 * Format: hex
                 * @description Root of withdrawal credentials
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                withdrawal_credentials: string;
                /**
                 * @description Balance at stake in Gwei.
                 * @example 1
                 */
                effective_balance: string;
                /**
                 * @description Was validator slashed (not longer active).
                 * @example false
                 */
                slashed: boolean;
                /**
                 * @description When criteria for activation were met.
                 * @example 1
                 */
                activation_eligibility_epoch: string;
                /**
                 * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                 * @example 1
                 */
                activation_epoch: string;
                /**
                 * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                 * @example 1
                 */
                exit_epoch: string;
                /**
                 * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                 * @example 1
                 */
                withdrawable_epoch: string;
              };
            }[];
          };
        };
      };
      /** Invalid state or validator ID, or status */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** The lists of validator IDs and statuses to filter on. Either or both may be `null` to signal that no filtering on that attribute is desired. */
    requestBody: {
      content: {
        'application/json': {
          ids?: string[];
          statuses?: (
            | (
                | 'pending_initialized'
                | 'pending_queued'
                | 'active_ongoing'
                | 'active_exiting'
                | 'active_slashed'
                | 'exited_unslashed'
                | 'exited_slashed'
                | 'withdrawal_possible'
                | 'withdrawal_done'
              )
            | ('active' | 'pending' | 'exited' | 'withdrawal')
          )[];
        };
      };
    };
  };
  /** Returns validator specified by state and id or public key along with status and balance. */
  getStateValidator: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
        /** Either hex encoded public key (any bytes48 with 0x prefix) or validator index */
        validator_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              index: string;
              /**
               * @description Current validator balance in gwei.
               * @example 1
               */
              balance: string;
              /**
               * @description Possible statuses:
               * - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.
               * - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).
               * - **active_ongoing** - When validator must be attesting, and have not initiated any exit.
               * - **active_exiting** - When validator is still active, but filed a voluntary request to exit.
               * - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.
               * - **exited_unslashed** - When validator has reached regular exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.
               * - **exited_slashed** - When validator has reached regular exit epoch, but was slashed, have to wait for a longer withdrawal period.
               * - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.
               * - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away
               *
               * [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)
               *
               * @example active_ongoing
               * @enum {undefined}
               */
              status:
                | 'pending_initialized'
                | 'pending_queued'
                | 'active_ongoing'
                | 'active_exiting'
                | 'active_slashed'
                | 'exited_unslashed'
                | 'exited_slashed'
                | 'withdrawal_possible'
                | 'withdrawal_done';
              validator: {
                /**
                 * Format: hex
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey: string;
                /**
                 * Format: hex
                 * @description Root of withdrawal credentials
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                withdrawal_credentials: string;
                /**
                 * @description Balance at stake in Gwei.
                 * @example 1
                 */
                effective_balance: string;
                /**
                 * @description Was validator slashed (not longer active).
                 * @example false
                 */
                slashed: boolean;
                /**
                 * @description When criteria for activation were met.
                 * @example 1
                 */
                activation_eligibility_epoch: string;
                /**
                 * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                 * @example 1
                 */
                activation_epoch: string;
                /**
                 * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                 * @example 1
                 */
                exit_epoch: string;
                /**
                 * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                 * @example 1
                 */
                withdrawable_epoch: string;
              };
            };
          };
        };
      };
      /** Invalid state or validator ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns filterable list of validators balances.
   *
   * Balances will be returned for all indices or public key that match known validators. If an index or public key does not
   * match any known validator, no balance will be returned but this will not cause an error. There are no guarantees for the
   * returned data in terms of ordering; the index is returned for each balance, and can be used to confirm for which inputs a
   * response has been returned.
   */
  getStateValidatorBalances: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Either hex encoded public key (any bytes48 with 0x prefix) or validator index */
        id?: string[];
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              index: string;
              /**
               * @description Current validator balance in gwei.
               * @example 1
               */
              balance: string;
            }[];
          };
        };
      };
      /** Invalid state or validator ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Too many validator IDs */
      414: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns filterable list of validators balances.
   *
   * Balances will be returned for all indices or public keys that match known validators. If an index or public key does not
   * match any known validator, no balance will be returned but this will not cause an error. There are no guarantees for the
   * returned data in terms of ordering; the index is returned for each balance, and can be used to confirm for which inputs a
   * response has been returned.
   */
  postStateValidatorBalances: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              index: string;
              /**
               * @description Current validator balance in gwei.
               * @example 1
               */
              balance: string;
            }[];
          };
        };
      };
      /** Invalid state ID or malformed request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /**
     * An array of values, with each value either a hex encoded public key (any bytes48 with 0x prefix) or a validator index.
     *
     * If the supplied list is empty (i.e. the body is `[]`) or no body is supplied then balances will be returned for all validators.
     */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /**
   * Returns filterable list of validators identities.
   *
   * Identities will be returned for all indices or public keys that match known validators. If an index or public key does not
   * match any known validator, no identity will be returned but this will not cause an error. There are no guarantees for the
   * returned data in terms of ordering.
   *
   *  Depending on `Accept` header data can be returned either as JSON or as bytes serialized by SSZ.
   */
  postStateValidatorIdentities: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              index: string;
              /**
               * Format: hex
               * @description Public key of validator.
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
               * @example 1
               */
              activation_epoch: string;
            }[];
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid state ID or malformed request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** An array of values, with each value either a hex encoded public key (any bytes48 with 0x prefix) or a validator index. */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /** Retrieves the committees for the given state. */
  getEpochCommittees: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Fetch committees for the given epoch.  If not present then the committees for the epoch of the state will be obtained. */
        epoch?: string;
        /** Restrict returned values to those matching the supplied committee index. */
        index?: string;
        /** Restrict returned values to those matching the supplied slot. */
        slot?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * @description Committee index at a slot
               * @example 1
               */
              index: string;
              /** @example 1 */
              slot: string;
              /** @description List of validator indices assigned to this committee */
              validators: string[];
            }[];
          };
        };
      };
      /** Invalid state ID, index, epoch, slot, or combination thereof */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves the current sync committee for the given state. Also returns the subcommittee assignments. */
  getEpochSyncCommittees: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Fetch sync committees for the given epoch.  If not present then the sync committees for the epoch of the state will be obtained. */
        epoch?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /** @description all of the validator indices in the current sync committee */
              validators: string[];
              validator_aggregates: string[][];
            };
          };
        };
      };
      /** Invalid state ID or epoch */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Fetch the RANDAO mix for the requested epoch from the state identified by `state_id`.
   *
   * If an epoch is not specified then the RANDAO mix for the state's current epoch will be returned.
   *
   * By adjusting the `state_id` parameter you can query for any historic value of the RANDAO mix.
   * Ordinarily states from the same epoch will mutate the RANDAO mix for that epoch as blocks are
   * applied.
   */
  getStateRandao: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** Epoch to fetch the RANDAO mix for. Default: state's current epoch. */
        epoch?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * Format: hex
               * @description RANDAO mix for requested epoch in state.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              randao: string;
            };
          };
        };
      };
      /** Invalid state ID or epoch */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves block headers matching given query. By default it will fetch current head slot blocks. */
  getBlockHeaders: {
    parameters: {
      query: {
        slot?: string;
        parent_root?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
              canonical: boolean;
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves block header for given block id. */
  getBlockHeader: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
              canonical: boolean;
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            };
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Instructs the beacon node to use the components of the `SignedBlindedBeaconBlock` to construct and publish a
   * `SignedBeaconBlock` by swapping out the `transactions_root` for the corresponding full list of `transactions`.
   * The beacon node should broadcast a newly constructed `SignedBeaconBlock` to the beacon network,
   * to be included in the beacon chain. The beacon node is not required to validate the signed
   * `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been
   * successful. The beacon node is expected to integrate the new block into its state, and
   * therefore validate the block internally, however blocks which fail the validation are still
   * broadcast but a different status code is returned (202). Before Bellatrix, this endpoint will accept
   * a `SignedBeaconBlock`.
   */
  publishBlindedBlock: {
    parameters: {
      header: {
        /** The active consensus version to which the block being submitted belongs. */
        'Eth-Consensus-Version'?:
          | 'phase0'
          | 'altair'
          | 'bellatrix'
          | 'capella'
          | 'deneb'
          | 'electra';
      };
    };
    responses: {
      /** The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database. */
      200: unknown;
      /** The block failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node's database. */
      202: unknown;
      /** The `SignedBlindedBeaconBlock` object is invalid */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Supplied content-type is not supported. */
      415: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Content-Type" header is unsupported, and the request has been rejected. This occurs when a HTTP request supplies a payload in a content-type that the server is not able to handle.
             * @example 415
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** The `SignedBlindedBeaconBlock` object composed of `BlindedBeaconBlock` object (produced by beacon node) and validator signature. */
    requestBody: {
      content: {
        'application/json': Partial<{
          /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
          message: {
            /**
             * @description The slot to which this block corresponds.
             * @example 1
             */
            slot: string;
            /**
             * @description Index of validator in validator registry.
             * @example 1
             */
            proposer_index: string;
            /**
             * Format: hex
             * @description The signing merkle root of the parent `BeaconBlock`.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_root: string;
            /**
             * Format: hex
             * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
          } & {
            /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
            body: {
              /**
               * Format: hex
               * @description The RanDAO reveal value provided by the validator.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              randao_reveal: string;
              /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
              eth1_data: {
                /**
                 * Format: hex
                 * @description Root of the deposit tree.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                deposit_root: string;
                /**
                 * @description Total number of deposits.
                 * @example 1
                 */
                deposit_count: string;
                /**
                 * Format: hex
                 * @description Ethereum 1.x block hash.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                block_hash: string;
              };
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              graffiti: string;
              proposer_slashings: {
                /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                signed_header_1: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  message: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                signed_header_2: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  message: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              attester_slashings: {
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_1: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_2: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              attestations: {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description BLS aggregate signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[];
              deposits: {
                /** @description Branch in the deposit tree. */
                proof: string[];
                /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                data: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description The withdrawal credentials.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Amount in Gwei.
                   * @example 1
                   */
                  amount: string;
                  /**
                   * Format: hex
                   * @description Container self-signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              voluntary_exits: {
                /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                message: {
                  /**
                   * @description Minimum epoch for processing exit.
                   * @example 1
                   */
                  epoch: string;
                  /**
                   * @description Index of the exiting validator.
                   * @example 1
                   */
                  validator_index: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[];
            };
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }> &
          Partial<{
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Altair spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
              } & {
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#beaconblockbody) object from the CL Capella spec, which contains a transactions root rather than a full transactions list. */
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                bls_to_execution_changes: {
                  /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                  message: {
                    /**
                     * @description Index of the validator for which credentials will be changed.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description Public key of existing credentials.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    from_bls_pubkey: string;
                    /**
                     * Format: hex
                     * @description Execution address to which the credentials will be changed.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    to_execution_address: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
              } & {
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#beaconblockbody) object from the CL Deneb spec, which contains a transactions root rather than a full transactions list. */
              body: {
                randao_reveal: string & unknown;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                bls_to_execution_changes: {
                  /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                  message: {
                    /**
                     * @description Index of the validator for which credentials will be changed.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description Public key of existing credentials.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    from_bls_pubkey: string;
                    /**
                     * Format: hex
                     * @description Execution address to which the credentials will be changed.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    to_execution_address: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                blob_kzg_commitments: string[];
              } & {
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /** @example 1 */
                  excess_blob_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/electra/beacon-chain.md#beaconblockbody) object from the CL Electra spec, which contains a transactions root rather than a full transactions list. */
              body: {
                randao_reveal: string & unknown;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                  /**
                   * Format: hex
                   * @description Committee bits.
                   * @example 0x0000000000000001
                   */
                  committee_bits: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                bls_to_execution_changes: {
                  /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                  message: {
                    /**
                     * @description Index of the validator for which credentials will be changed.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description Public key of existing credentials.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    from_bls_pubkey: string;
                    /**
                     * Format: hex
                     * @description Execution address to which the credentials will be changed.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    to_execution_address: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                blob_kzg_commitments: string[];
              } & {
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /** @example 1 */
                  excess_blob_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
                /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                execution_requests: {
                  deposits: {
                    /**
                     * Format: hex
                     * @description BLS public key of validator.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description The value to be deposited (gwei).
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                    /**
                     * @description The index of the deposit request.
                     * @example 1
                     */
                    index: string;
                  }[];
                  withdrawals: {
                    /**
                     * Format: hex
                     * @description Execution address which sent the request.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    source_address: string;
                    /**
                     * Format: hex
                     * @description BLS public key of validator.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    validator_pubkey: string;
                    /**
                     * @description The value to be withdrawn (gwei).
                     * @example 1
                     */
                    amount: string;
                  }[];
                  consolidations: {
                    /**
                     * Format: hex
                     * @description Execution address which sent the request.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    source_address: string;
                    /**
                     * Format: hex
                     * @description BLS public key of validator to consolidate from.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    source_pubkey: string;
                    /**
                     * Format: hex
                     * @description BLS public key of validator to consolidate to.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    target_pubkey: string;
                  }[];
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }>;
        'application/octet-stream': unknown;
      };
    };
  };
  /**
   * Instructs the beacon node to use the components of the `SignedBlindedBeaconBlock` to construct and publish a
   * `SignedBeaconBlock` by swapping out the `transactions_root` for the corresponding full list of `transactions`.
   * The beacon node should broadcast a newly constructed `SignedBeaconBlock` to the beacon network,
   * to be included in the beacon chain. The beacon node is not required to validate the signed
   * `BeaconBlock`, and a successful response (20X) only indicates that the broadcast has been
   * successful. The beacon node is expected to integrate the new block into its state, and
   * therefore validate the block internally, however blocks which fail the validation are still
   * broadcast but a different status code is returned (202). Before Bellatrix, this endpoint will accept
   * a `SignedBeaconBlock`. The broadcast behaviour may be adjusted via the `broadcast_validation`
   * query parameter.
   */
  publishBlindedBlockV2: {
    parameters: {
      query: {
        /**
         * Level of validation that must be applied to a block before it is broadcast.
         *
         * Possible values:
         * - **`gossip`** (default): lightweight gossip checks only
         * - **`consensus`**: full consensus checks, including validation of all signatures and
         *   blocks fields _except_ for the execution payload transactions.
         * - **`consensus_and_equivocation`**: the same as `consensus`, with an extra equivocation
         *   check immediately before the block is broadcast. If the block is found to be an
         *   equivocation it fails validation.
         *
         * If the block fails the requested level of a validation a 400 status MUST be returned
         * immediately and the block MUST NOT be broadcast to the network.
         *
         * If validation succeeds, the block must still be fully verified before it is
         * incorporated into the state and a 20x status is returned to the caller.
         */
        broadcast_validation?:
          | 'gossip'
          | 'consensus'
          | 'consensus_and_equivocation';
      };
      header: {
        /** The active consensus version to which the block being submitted belongs. */
        'Eth-Consensus-Version':
          | 'phase0'
          | 'altair'
          | 'bellatrix'
          | 'capella'
          | 'deneb'
          | 'electra';
      };
    };
    responses: {
      /** The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database. */
      200: unknown;
      /** The block failed validation, but was successfully broadcast anyway. It was not integrated into the beacon node's database. */
      202: unknown;
      /** The `SignedBlindedBeaconBlock` object is invalid or broadcast validation failed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Supplied content-type is not supported. */
      415: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Content-Type" header is unsupported, and the request has been rejected. This occurs when a HTTP request supplies a payload in a content-type that the server is not able to handle.
             * @example 415
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** The `SignedBlindedBeaconBlock` object composed of `BlindedBeaconBlock` object (produced by beacon node) and validator signature. */
    requestBody: {
      content: {
        'application/json': Partial<{
          /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
          message: {
            /**
             * @description The slot to which this block corresponds.
             * @example 1
             */
            slot: string;
            /**
             * @description Index of validator in validator registry.
             * @example 1
             */
            proposer_index: string;
            /**
             * Format: hex
             * @description The signing merkle root of the parent `BeaconBlock`.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_root: string;
            /**
             * Format: hex
             * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
          } & {
            /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
            body: {
              /**
               * Format: hex
               * @description The RanDAO reveal value provided by the validator.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              randao_reveal: string;
              /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
              eth1_data: {
                /**
                 * Format: hex
                 * @description Root of the deposit tree.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                deposit_root: string;
                /**
                 * @description Total number of deposits.
                 * @example 1
                 */
                deposit_count: string;
                /**
                 * Format: hex
                 * @description Ethereum 1.x block hash.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                block_hash: string;
              };
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              graffiti: string;
              proposer_slashings: {
                /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                signed_header_1: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  message: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                signed_header_2: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  message: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              attester_slashings: {
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_1: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_2: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              attestations: {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description BLS aggregate signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[];
              deposits: {
                /** @description Branch in the deposit tree. */
                proof: string[];
                /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                data: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description The withdrawal credentials.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Amount in Gwei.
                   * @example 1
                   */
                  amount: string;
                  /**
                   * Format: hex
                   * @description Container self-signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              voluntary_exits: {
                /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                message: {
                  /**
                   * @description Minimum epoch for processing exit.
                   * @example 1
                   */
                  epoch: string;
                  /**
                   * @description Index of the exiting validator.
                   * @example 1
                   */
                  validator_index: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[];
            };
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }> &
          Partial<{
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Altair spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
              } & {
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#beaconblockbody) object from the CL Capella spec, which contains a transactions root rather than a full transactions list. */
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                bls_to_execution_changes: {
                  /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                  message: {
                    /**
                     * @description Index of the validator for which credentials will be changed.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description Public key of existing credentials.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    from_bls_pubkey: string;
                    /**
                     * Format: hex
                     * @description Execution address to which the credentials will be changed.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    to_execution_address: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
              } & {
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#beaconblockbody) object from the CL Deneb spec, which contains a transactions root rather than a full transactions list. */
              body: {
                randao_reveal: string & unknown;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                bls_to_execution_changes: {
                  /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                  message: {
                    /**
                     * @description Index of the validator for which credentials will be changed.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description Public key of existing credentials.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    from_bls_pubkey: string;
                    /**
                     * Format: hex
                     * @description Execution address to which the credentials will be changed.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    to_execution_address: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                blob_kzg_commitments: string[];
              } & {
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /** @example 1 */
                  excess_blob_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/electra/beacon-chain.md#beaconblockbody) object from the CL Electra spec, which contains a transactions root rather than a full transactions list. */
              body: {
                randao_reveal: string & unknown;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                  /**
                   * Format: hex
                   * @description Committee bits.
                   * @example 0x0000000000000001
                   */
                  committee_bits: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                bls_to_execution_changes: {
                  /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                  message: {
                    /**
                     * @description Index of the validator for which credentials will be changed.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description Public key of existing credentials.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    from_bls_pubkey: string;
                    /**
                     * Format: hex
                     * @description Execution address to which the credentials will be changed.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    to_execution_address: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                blob_kzg_commitments: string[];
              } & {
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /** @example 1 */
                  excess_blob_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
                /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                execution_requests: {
                  deposits: {
                    /**
                     * Format: hex
                     * @description BLS public key of validator.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description The value to be deposited (gwei).
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                    /**
                     * @description The index of the deposit request.
                     * @example 1
                     */
                    index: string;
                  }[];
                  withdrawals: {
                    /**
                     * Format: hex
                     * @description Execution address which sent the request.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    source_address: string;
                    /**
                     * Format: hex
                     * @description BLS public key of validator.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    validator_pubkey: string;
                    /**
                     * @description The value to be withdrawn (gwei).
                     * @example 1
                     */
                    amount: string;
                  }[];
                  consolidations: {
                    /**
                     * Format: hex
                     * @description Execution address which sent the request.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    source_address: string;
                    /**
                     * Format: hex
                     * @description BLS public key of validator to consolidate from.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    source_pubkey: string;
                    /**
                     * Format: hex
                     * @description BLS public key of validator to consolidate to.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    target_pubkey: string;
                  }[];
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }>;
        'application/octet-stream': unknown;
      };
    };
  };
  /**
   * Instructs the beacon node to broadcast a newly signed beacon block to the beacon network,
   * to be included in the beacon chain. A success response (20x) indicates that the block
   * passed gossip validation and was successfully broadcast onto the network.
   * The beacon node is also expected to integrate the block into state, but may broadcast it
   * before doing so, so as to aid timely delivery of the block. Should the block fail full
   * validation, a separate success response code (202) is used to indicate that the block was
   * successfully broadcast but failed integration. After Deneb, this additionally instructs
   * the beacon node to broadcast all given blobs.
   */
  publishBlock: {
    parameters: {
      header: {
        /** The active consensus version to which the block being submitted belongs. */
        'Eth-Consensus-Version'?:
          | 'phase0'
          | 'altair'
          | 'bellatrix'
          | 'capella'
          | 'deneb'
          | 'electra';
      };
    };
    responses: {
      /** The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database. */
      200: unknown;
      /** The block could not be integrated into the beacon node's database as it failed validation, but was successfully broadcast. */
      202: unknown;
      /** The `SignedBeaconBlock` object is invalid and could not be broadcast */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Supplied content-type is not supported. */
      415: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Content-Type" header is unsupported, and the request has been rejected. This occurs when a HTTP request supplies a payload in a content-type that the server is not able to handle.
             * @example 415
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** The `SignedBeaconBlock` object composed of `BeaconBlock` object (produced by beacon node) and validator signature. */
    requestBody: {
      content: {
        'application/json': Partial<{
          /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
          message: {
            /**
             * @description The slot to which this block corresponds.
             * @example 1
             */
            slot: string;
            /**
             * @description Index of validator in validator registry.
             * @example 1
             */
            proposer_index: string;
            /**
             * Format: hex
             * @description The signing merkle root of the parent `BeaconBlock`.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_root: string;
            /**
             * Format: hex
             * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
          } & {
            /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
            body: {
              /**
               * Format: hex
               * @description The RanDAO reveal value provided by the validator.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              randao_reveal: string;
              /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
              eth1_data: {
                /**
                 * Format: hex
                 * @description Root of the deposit tree.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                deposit_root: string;
                /**
                 * @description Total number of deposits.
                 * @example 1
                 */
                deposit_count: string;
                /**
                 * Format: hex
                 * @description Ethereum 1.x block hash.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                block_hash: string;
              };
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              graffiti: string;
              proposer_slashings: {
                /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                signed_header_1: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  message: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                signed_header_2: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  message: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              attester_slashings: {
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_1: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_2: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              attestations: {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description BLS aggregate signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[];
              deposits: {
                /** @description Branch in the deposit tree. */
                proof: string[];
                /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                data: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description The withdrawal credentials.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Amount in Gwei.
                   * @example 1
                   */
                  amount: string;
                  /**
                   * Format: hex
                   * @description Container self-signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              voluntary_exits: {
                /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                message: {
                  /**
                   * @description Minimum epoch for processing exit.
                   * @example 1
                   */
                  epoch: string;
                  /**
                   * @description Index of the exiting validator.
                   * @example 1
                   */
                  validator_index: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[];
            };
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }> &
          Partial<{
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Altair spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
              } & {
                execution_payload: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  transactions: string[];
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                bls_to_execution_changes: {
                  /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                  message: {
                    /**
                     * @description Index of the validator for which credentials will be changed.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description Public key of existing credentials.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    from_bls_pubkey: string;
                    /**
                     * Format: hex
                     * @description Execution address to which the credentials will be changed.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    to_execution_address: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
              } & {
                execution_payload: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  transactions: string[];
                  withdrawals: {
                    /**
                     * @description The index of the withdrawal.
                     * @example 1
                     */
                    index: string;
                    /**
                     * @description The index of the withdrawing validator.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description The address to which the withdrawal is credited.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    address: string;
                    /**
                     * @description The value withdrawn (gwei).
                     * @example 1
                     */
                    amount: string;
                  }[];
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Deneb spec. */
            signed_block: {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing Merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                body: {
                  randao_reveal: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                  sync_aggregate: {
                    /**
                     * Format: hex
                     * @description Aggregation bits of sync
                     * @example 0x01
                     */
                    sync_committee_bits: string;
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    sync_committee_signature: string;
                  };
                  bls_to_execution_changes: {
                    /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                    message: {
                      /**
                       * @description Index of the validator for which credentials will be changed.
                       * @example 1
                       */
                      validator_index: string;
                      /**
                       * Format: hex
                       * @description Public key of existing credentials.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      from_bls_pubkey: string;
                      /**
                       * Format: hex
                       * @description Execution address to which the credentials will be changed.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      to_execution_address: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  blob_kzg_commitments: string[];
                } & {
                  execution_payload: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    transactions: string[];
                    withdrawals: {
                      /**
                       * @description The index of the withdrawal.
                       * @example 1
                       */
                      index: string;
                      /**
                       * @description The index of the withdrawing validator.
                       * @example 1
                       */
                      validator_index: string;
                      /**
                       * Format: hex
                       * @description The address to which the withdrawal is credited.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      address: string;
                      /**
                       * @description The value withdrawn (gwei).
                       * @example 1
                       */
                      amount: string;
                    }[];
                  };
                };
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            kzg_proofs: string[];
            blobs: string[];
          }> &
          Partial<{
            /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Electra spec. */
            signed_block: {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing Merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                body: {
                  randao_reveal: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                    /**
                     * Format: hex
                     * @description Committee bits.
                     * @example 0x0000000000000001
                     */
                    committee_bits: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                  sync_aggregate: {
                    /**
                     * Format: hex
                     * @description Aggregation bits of sync
                     * @example 0x01
                     */
                    sync_committee_bits: string;
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    sync_committee_signature: string;
                  };
                  bls_to_execution_changes: {
                    /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                    message: {
                      /**
                       * @description Index of the validator for which credentials will be changed.
                       * @example 1
                       */
                      validator_index: string;
                      /**
                       * Format: hex
                       * @description Public key of existing credentials.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      from_bls_pubkey: string;
                      /**
                       * Format: hex
                       * @description Execution address to which the credentials will be changed.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      to_execution_address: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  blob_kzg_commitments: string[];
                } & {
                  execution_payload: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    transactions: string[];
                    withdrawals: {
                      /**
                       * @description The index of the withdrawal.
                       * @example 1
                       */
                      index: string;
                      /**
                       * @description The index of the withdrawing validator.
                       * @example 1
                       */
                      validator_index: string;
                      /**
                       * Format: hex
                       * @description The address to which the withdrawal is credited.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      address: string;
                      /**
                       * @description The value withdrawn (gwei).
                       * @example 1
                       */
                      amount: string;
                    }[];
                  };
                  /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                  execution_requests: {
                    deposits: {
                      /**
                       * Format: hex
                       * @description BLS public key of validator.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description The value to be deposited (gwei).
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                      /**
                       * @description The index of the deposit request.
                       * @example 1
                       */
                      index: string;
                    }[];
                    withdrawals: {
                      /**
                       * Format: hex
                       * @description Execution address which sent the request.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      source_address: string;
                      /**
                       * Format: hex
                       * @description BLS public key of validator.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      validator_pubkey: string;
                      /**
                       * @description The value to be withdrawn (gwei).
                       * @example 1
                       */
                      amount: string;
                    }[];
                    consolidations: {
                      /**
                       * Format: hex
                       * @description Execution address which sent the request.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      source_address: string;
                      /**
                       * Format: hex
                       * @description BLS public key of validator to consolidate from.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      source_pubkey: string;
                      /**
                       * Format: hex
                       * @description BLS public key of validator to consolidate to.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      target_pubkey: string;
                    }[];
                  };
                };
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            kzg_proofs: string[];
            blobs: string[];
          }>;
        'application/octet-stream': unknown;
      };
    };
  };
  /**
   * Instructs the beacon node to broadcast a newly signed beacon block to the beacon network,
   * to be included in the beacon chain. A success response (20x) indicates that the block
   * passed gossip validation and was successfully broadcast onto the network.
   * The beacon node is also expected to integrate the block into the state, but may broadcast it
   * before doing so, so as to aid timely delivery of the block. Should the block fail full
   * validation, a separate success response code (202) is used to indicate that the block was
   * successfully broadcast but failed integration. After Deneb, this additionally instructs
   * the beacon node to broadcast all given blobs. The broadcast behaviour may be adjusted via the
   * `broadcast_validation` query parameter.
   */
  publishBlockV2: {
    parameters: {
      query: {
        /**
         * Level of validation that must be applied to a block before it is broadcast.
         *
         * Possible values:
         * - **`gossip`** (default): lightweight gossip checks only
         * - **`consensus`**: full consensus checks, including validation of all signatures and
         *   blocks fields _except_ for the execution payload transactions.
         * - **`consensus_and_equivocation`**: the same as `consensus`, with an extra equivocation
         *   check immediately before the block is broadcast. If the block is found to be an
         *   equivocation it fails validation.
         *
         * If the block fails the requested level of a validation a 400 status MUST be returned
         * immediately and the block MUST NOT be broadcast to the network.
         *
         * If validation succeeds, the block must still be fully verified before it is
         * incorporated into the state and a 20x status is returned to the caller.
         */
        broadcast_validation?:
          | 'gossip'
          | 'consensus'
          | 'consensus_and_equivocation';
      };
      header: {
        /** The active consensus version to which the block being submitted belongs. */
        'Eth-Consensus-Version':
          | 'phase0'
          | 'altair'
          | 'bellatrix'
          | 'capella'
          | 'deneb'
          | 'electra';
      };
    };
    responses: {
      /** The block was validated successfully and has been broadcast. It has also been integrated into the beacon node's database. */
      200: unknown;
      /** The block could not be integrated into the beacon node's database as it failed validation, but was successfully broadcast. */
      202: unknown;
      /** The `SignedBeaconBlock` object is invalid or broadcast validation failed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Supplied content-type is not supported. */
      415: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Content-Type" header is unsupported, and the request has been rejected. This occurs when a HTTP request supplies a payload in a content-type that the server is not able to handle.
             * @example 415
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** The `SignedBeaconBlock` object composed of `BeaconBlock` object (produced by beacon node) and validator signature. */
    requestBody: {
      content: {
        'application/json': Partial<{
          /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
          message: {
            /**
             * @description The slot to which this block corresponds.
             * @example 1
             */
            slot: string;
            /**
             * @description Index of validator in validator registry.
             * @example 1
             */
            proposer_index: string;
            /**
             * Format: hex
             * @description The signing merkle root of the parent `BeaconBlock`.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            parent_root: string;
            /**
             * Format: hex
             * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            state_root: string;
          } & {
            /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
            body: {
              /**
               * Format: hex
               * @description The RanDAO reveal value provided by the validator.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              randao_reveal: string;
              /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
              eth1_data: {
                /**
                 * Format: hex
                 * @description Root of the deposit tree.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                deposit_root: string;
                /**
                 * @description Total number of deposits.
                 * @example 1
                 */
                deposit_count: string;
                /**
                 * Format: hex
                 * @description Ethereum 1.x block hash.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                block_hash: string;
              };
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              graffiti: string;
              proposer_slashings: {
                /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                signed_header_1: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  message: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                signed_header_2: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  message: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              attester_slashings: {
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_1: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_2: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              attestations: {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description BLS aggregate signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[];
              deposits: {
                /** @description Branch in the deposit tree. */
                proof: string[];
                /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                data: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description The withdrawal credentials.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Amount in Gwei.
                   * @example 1
                   */
                  amount: string;
                  /**
                   * Format: hex
                   * @description Container self-signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[];
              voluntary_exits: {
                /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                message: {
                  /**
                   * @description Minimum epoch for processing exit.
                   * @example 1
                   */
                  epoch: string;
                  /**
                   * @description Index of the exiting validator.
                   * @example 1
                   */
                  validator_index: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[];
            };
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }> &
          Partial<{
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Altair spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
              } & {
                execution_payload: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  transactions: string[];
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing Merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              body: {
                /**
                 * Format: hex
                 * @description The RanDAO reveal value provided by the validator.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                randao_reveal: string;
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                graffiti: string;
                proposer_slashings: {
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_1: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                  signed_header_2: {
                    /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                    message: {
                      /**
                       * @description The slot to which this block corresponds.
                       * @example 1
                       */
                      slot: string;
                      /**
                       * @description Index of validator in validator registry.
                       * @example 1
                       */
                      proposer_index: string;
                      /**
                       * Format: hex
                       * @description The signing merkle root of the parent `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_root: string;
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                    } & {
                      /**
                       * Format: hex
                       * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      body_root: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attester_slashings: {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                attestations: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                deposits: {
                  /** @description Branch in the deposit tree. */
                  proof: string[];
                  /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                  data: {
                    /**
                     * Format: hex
                     * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    pubkey: string;
                    /**
                     * Format: hex
                     * @description The withdrawal credentials.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawal_credentials: string;
                    /**
                     * @description Amount in Gwei.
                     * @example 1
                     */
                    amount: string;
                    /**
                     * Format: hex
                     * @description Container self-signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[];
                voluntary_exits: {
                  /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                  message: {
                    /**
                     * @description Minimum epoch for processing exit.
                     * @example 1
                     */
                    epoch: string;
                    /**
                     * @description Index of the exiting validator.
                     * @example 1
                     */
                    validator_index: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                bls_to_execution_changes: {
                  /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                  message: {
                    /**
                     * @description Index of the validator for which credentials will be changed.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description Public key of existing credentials.
                     * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                     */
                    from_bls_pubkey: string;
                    /**
                     * Format: hex
                     * @description Execution address to which the credentials will be changed.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    to_execution_address: string;
                  };
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                }[];
              } & {
                execution_payload: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  transactions: string[];
                  withdrawals: {
                    /**
                     * @description The index of the withdrawal.
                     * @example 1
                     */
                    index: string;
                    /**
                     * @description The index of the withdrawing validator.
                     * @example 1
                     */
                    validator_index: string;
                    /**
                     * Format: hex
                     * @description The address to which the withdrawal is credited.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    address: string;
                    /**
                     * @description The value withdrawn (gwei).
                     * @example 1
                     */
                    amount: string;
                  }[];
                };
              };
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }> &
          Partial<{
            /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Deneb spec. */
            signed_block: {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing Merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                body: {
                  randao_reveal: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                  sync_aggregate: {
                    /**
                     * Format: hex
                     * @description Aggregation bits of sync
                     * @example 0x01
                     */
                    sync_committee_bits: string;
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    sync_committee_signature: string;
                  };
                  bls_to_execution_changes: {
                    /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                    message: {
                      /**
                       * @description Index of the validator for which credentials will be changed.
                       * @example 1
                       */
                      validator_index: string;
                      /**
                       * Format: hex
                       * @description Public key of existing credentials.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      from_bls_pubkey: string;
                      /**
                       * Format: hex
                       * @description Execution address to which the credentials will be changed.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      to_execution_address: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  blob_kzg_commitments: string[];
                } & {
                  execution_payload: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    transactions: string[];
                    withdrawals: {
                      /**
                       * @description The index of the withdrawal.
                       * @example 1
                       */
                      index: string;
                      /**
                       * @description The index of the withdrawing validator.
                       * @example 1
                       */
                      validator_index: string;
                      /**
                       * Format: hex
                       * @description The address to which the withdrawal is credited.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      address: string;
                      /**
                       * @description The value withdrawn (gwei).
                       * @example 1
                       */
                      amount: string;
                    }[];
                  };
                };
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            kzg_proofs: string[];
            blobs: string[];
          }> &
          Partial<{
            /** @description The [`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#signedbeaconblock) object envelope from the CL Electra spec. */
            signed_block: {
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing Merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                body: {
                  randao_reveal: string & unknown;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                    /**
                     * Format: hex
                     * @description Committee bits.
                     * @example 0x0000000000000001
                     */
                    committee_bits: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                  sync_aggregate: {
                    /**
                     * Format: hex
                     * @description Aggregation bits of sync
                     * @example 0x01
                     */
                    sync_committee_bits: string;
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    sync_committee_signature: string;
                  };
                  bls_to_execution_changes: {
                    /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                    message: {
                      /**
                       * @description Index of the validator for which credentials will be changed.
                       * @example 1
                       */
                      validator_index: string;
                      /**
                       * Format: hex
                       * @description Public key of existing credentials.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      from_bls_pubkey: string;
                      /**
                       * Format: hex
                       * @description Execution address to which the credentials will be changed.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      to_execution_address: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  blob_kzg_commitments: string[];
                } & {
                  execution_payload: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    transactions: string[];
                    withdrawals: {
                      /**
                       * @description The index of the withdrawal.
                       * @example 1
                       */
                      index: string;
                      /**
                       * @description The index of the withdrawing validator.
                       * @example 1
                       */
                      validator_index: string;
                      /**
                       * Format: hex
                       * @description The address to which the withdrawal is credited.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      address: string;
                      /**
                       * @description The value withdrawn (gwei).
                       * @example 1
                       */
                      amount: string;
                    }[];
                  };
                  /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                  execution_requests: {
                    deposits: {
                      /**
                       * Format: hex
                       * @description BLS public key of validator.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description The value to be deposited (gwei).
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                      /**
                       * @description The index of the deposit request.
                       * @example 1
                       */
                      index: string;
                    }[];
                    withdrawals: {
                      /**
                       * Format: hex
                       * @description Execution address which sent the request.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      source_address: string;
                      /**
                       * Format: hex
                       * @description BLS public key of validator.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      validator_pubkey: string;
                      /**
                       * @description The value to be withdrawn (gwei).
                       * @example 1
                       */
                      amount: string;
                    }[];
                    consolidations: {
                      /**
                       * Format: hex
                       * @description Execution address which sent the request.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      source_address: string;
                      /**
                       * Format: hex
                       * @description BLS public key of validator to consolidate from.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      source_pubkey: string;
                      /**
                       * Format: hex
                       * @description BLS public key of validator to consolidate to.
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      target_pubkey: string;
                    }[];
                  };
                };
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            kzg_proofs: string[];
            blobs: string[];
          }>;
        'application/octet-stream': unknown;
      };
    };
  };
  /**
   * Retrieves block details for given block id.
   * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
   */
  getBlockV2: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: Partial<{
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                body: {
                  /**
                   * Format: hex
                   * @description The RanDAO reveal value provided by the validator.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  randao_reveal: string;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                };
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }> &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Altair spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }> &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }> &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }> &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }> &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                      /**
                       * Format: hex
                       * @description Committee bits.
                       * @example 0x0000000000000001
                       */
                      committee_bits: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                    /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                    execution_requests: {
                      deposits: {
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description The value to be deposited (gwei).
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                        /**
                         * @description The index of the deposit request.
                         * @example 1
                         */
                        index: string;
                      }[];
                      withdrawals: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        validator_pubkey: string;
                        /**
                         * @description The value to be withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                      consolidations: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate from.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        source_pubkey: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate to.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        target_pubkey: string;
                      }[];
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }>;
          };
          'application/octet-stream': unknown;
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader */
  getBlockRoot: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * Format: hex
               * @description HashTreeRoot of BeaconBlock/BeaconBlockHeader object
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves attestation included in requested block. */
  getBlockAttestations: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * Format: hex
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits: string;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description BLS aggregate signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves attestation included in requested block. */
  getBlockAttestationsV2: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        headers: {
          /** The active consensus version to which the attestations belong. */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: Partial<
              {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description BLS aggregate signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[]
            > &
              Partial<
                {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                  /**
                   * Format: hex
                   * @description Committee bits.
                   * @example 0x0000000000000001
                   */
                  committee_bits: string;
                }[]
              >;
          };
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Retrieves blob sidecars for a given block id.
   * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ.
   *
   * If the `indices` parameter is specified, only the blob sidecars with the specified indices will be returned. There are no guarantees
   * for the returned blob sidecars in terms of ordering.
   */
  getBlobSidecars: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
      query: {
        /** Array of indices for blob sidecars to request for in the specified block. Returns all blob sidecars in the block if not specified. */
        indices?: string[];
      };
    };
    responses: {
      /** Successful response */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version'?:
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example deneb
             * @enum {string}
             */
            version?:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic?: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized?: boolean;
            data: {
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description A blob is `FIELD_ELEMENTS_PER_BLOB * size_of(BLSFieldElement) = 4096 * 32 = 131072` bytes (`DATA`) representing a Blob as defined in Deneb
               */
              blob: string;
              /**
               * Format: hex
               * @description A G1 curve point. Same as BLS standard "is valid pubkey" check but also allows `0x00..00` for point-at-infinity
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              kzg_commitment: string;
              /**
               * Format: hex
               * @description A G1 curve point. Used for verifying that the `KZGCommitment` for a given `Blob` is correct.
               */
              kzg_proof: string;
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_block_header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
              kzg_commitment_inclusion_proof: string[];
            }[];
          };
          'application/octet-stream': unknown;
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves rewards info for sync committee members specified by array of public keys or validator index. If no array is provided, return reward info for every committee member. */
  getSyncCommitteeRewards: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            /** @description Rewards info for sync committee members */
            data: {
              /**
               * @description one entry for every validator participating in the sync committee
               * @example 0
               */
              validator_index: string;
              /**
               * @description sync committee reward in gwei for the validator
               * @example 2000
               */
              reward: string;
            }[];
          };
        };
      };
      /** Invalid get sync committee rewards request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /**
   * Retrieve [EIP-4881](https://eips.ethereum.org/EIPS/eip-4881) Deposit Tree Snapshot.
   * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
   */
  getDepositSnapshot: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            data: {
              finalized: string[];
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              deposit_root: string;
              /** @example 1 */
              deposit_count: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              execution_block_hash: string;
              /** @example 1 */
              execution_block_height: string;
            };
          };
          'application/octet-stream': unknown;
        };
      };
      /** No Finalized Snapshot Available */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieve block reward info for a single block */
  getBlockRewards: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            /** @description Rewards info for a single block */
            data: {
              /**
               * @description proposer of the block, the proposer index who receives these rewards
               * @example 123
               */
              proposer_index: string;
              /**
               * @description total block reward in gwei, equal to attestations + sync_aggregate + proposer_slashings + attester_slashings
               * @example 123
               */
              total: string;
              /**
               * @description block reward component due to included attestations in gwei
               * @example 123
               */
              attestations: string;
              /**
               * @description block reward component due to included sync_aggregate in gwei
               * @example 123
               */
              sync_aggregate: string;
              /**
               * @description block reward component due to included proposer_slashings in gwei
               * @example 123
               */
              proposer_slashings: string;
              /**
               * @description block reward component due to included attester_slashings in gwei
               * @example 123
               */
              attester_slashings: string;
            };
          };
        };
      };
      /** Invalid get block rewards request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block or required state not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieve attestation reward info for validators specified by array of public keys or validator index. If no array is provided, return reward info for every validator. */
  getAttestationsRewards: {
    parameters: {
      path: {
        /** The epoch to get rewards info from */
        epoch: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            /** @description Rewards info for attestations */
            data: {
              ideal_rewards: {
                /**
                 * @description validator's effective balance in gwei
                 * @example 1000000000
                 */
                effective_balance: string;
                /**
                 * @description Ideal attester's reward for head vote in gwei
                 * @example 2500
                 */
                head: string;
                /**
                 * @description Ideal attester's reward for target vote in gwei
                 * @example 5000
                 */
                target: string;
                /**
                 * @description Ideal attester's reward for source vote in gwei
                 * @example 5000
                 */
                source: string;
                /**
                 * @description Ideal attester's inclusion_delay reward in gwei (phase0 only)
                 * @example 5000
                 */
                inclusion_delay?: string;
                /**
                 * @description Ideal attester's inactivity penalty in gwei
                 * @example 5000
                 */
                inactivity: string;
              }[];
              total_rewards: {
                /**
                 * @description one entry for every validator based on their attestations in the epoch
                 * @example 0
                 */
                validator_index: string;
                /**
                 * @description attester's reward for head vote in gwei
                 * @example 2000
                 */
                head: string;
                /**
                 * @description attester's reward for target vote in gwei
                 * @example 2000
                 */
                target: string;
                /**
                 * @description attester's reward for source vote in gwei
                 * @example 4000
                 */
                source: string;
                /**
                 * @description attester's inclusion_delay reward in gwei (phase0 only)
                 * @example 2000
                 */
                inclusion_delay?: string;
                /**
                 * @description attester's inactivity penalty in gwei
                 * @example 2000
                 */
                inactivity: string;
              }[];
            };
          };
        };
      };
      /** Invalid get attestations rewards request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Epoch not known or required data not available */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /**
   * Retrieves blinded block for given block ID.
   * Depending on `Accept` header it can be returned either as JSON or as bytes serialized by SSZ
   */
  getBlindedBlock: {
    parameters: {
      path: {
        /**
         * Block identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", \<slot\>, \<hex encoded blockRoot with 0x prefix\>.
         */
        block_id: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: Partial<{
              /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL spec. */
              message: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                body: {
                  /**
                   * Format: hex
                   * @description The RanDAO reveal value provided by the validator.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  randao_reveal: string;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                };
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }> &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Altair spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }> &
              Partial<{
                /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Bellatrix spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }> &
              Partial<{
                /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblock) object from the CL Capella spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#beaconblockbody) object from the CL Capella spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }> &
              Partial<{
                /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#beaconblockbody) object from the CL Deneb spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }> &
              Partial<{
                /** @description A variant of the [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec, which contains a `BlindedBeaconBlockBody` rather than a `BeaconBlockBody`. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/electra/beacon-chain.md#beaconblockbody) object from the CL Electra spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                      /**
                       * Format: hex
                       * @description Committee bits.
                       * @example 0x0000000000000001
                       */
                      committee_bits: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                    /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                    execution_requests: {
                      deposits: {
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description The value to be deposited (gwei).
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                        /**
                         * @description The index of the deposit request.
                         * @example 1
                         */
                        index: string;
                      }[];
                      withdrawals: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        validator_pubkey: string;
                        /**
                         * @description The value to be withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                      consolidations: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate from.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        source_pubkey: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate to.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        target_pubkey: string;
                      }[];
                    };
                  };
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }>;
          };
          'application/octet-stream': unknown;
        };
      };
      /** The block ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Block not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests the [`LightClientBootstrap`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/sync-protocol.md#lightclientbootstrap) structure corresponding to a given post-Altair beacon block root.
   * Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.
   *
   * Servers SHOULD provide results as defined in [`create_light_client_bootstrap`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/full-node.md#create_light_client_bootstrap). To fulfill a request, the requested block's post state needs to be known.
   */
  getLightClientBootstrap: {
    parameters: {
      path: {
        /**
         * Block root.
         * \<hex encoded blockRoot with 0x prefix\>.
         */
        block_root: string;
      };
    };
    responses: {
      /** Success */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<{
              header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                beacon: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
              };
              current_sync_committee: {
                pubkeys: string[];
                /**
                 * Format: hex
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                aggregate_pubkey: string;
              };
              current_sync_committee_branch: string[];
            }> &
              Partial<{
                header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                current_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                current_sync_committee_branch: string[];
              }> &
              Partial<{
                header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                current_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                current_sync_committee_branch: string[];
              }> &
              Partial<{
                header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                current_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                current_sync_committee_branch: string[];
              }>;
          };
          'application/octet-stream': unknown;
        };
      };
      /** Malformed request parameter */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** `LightClientBootstrap` instance cannot be produced for the given block root */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests the [`LightClientUpdate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/sync-protocol.md#lightclientupdate) instances in the sync committee period range `[start_period, start_period + count)`, leading up to the current head sync committee period as selected by fork choice.
   * Depending on the `Accept` header they can be returned either as JSON or SSZ-serialized bytes.
   *
   * Servers SHOULD provide results as defined in [`create_light_client_update`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/full-node.md#create_light_client_update). They MUST respond with at least the earliest known result within the requested range, and MUST send results in consecutive order (by period). The response MUST NOT contain more than [`min(MAX_REQUEST_LIGHT_CLIENT_UPDATES, count)`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/p2p-interface.md#configuration) results.
   */
  getLightClientUpdatesByRange: {
    parameters: {
      query: {
        start_period: string;
        count: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<{
              attested_header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                beacon: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
              };
              next_sync_committee: {
                pubkeys: string[];
                /**
                 * Format: hex
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                aggregate_pubkey: string;
              };
              next_sync_committee_branch: string[];
              finalized_header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                beacon: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
              };
              finality_branch: string[];
              /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
              sync_aggregate: {
                /**
                 * Format: hex
                 * @description Aggregation bits of sync
                 * @example 0x01
                 */
                sync_committee_bits: string;
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                sync_committee_signature: string;
              };
              /** @example 1 */
              signature_slot: string;
            }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                next_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                next_sync_committee_branch: string[];
                finalized_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finality_branch: string[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                next_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                next_sync_committee_branch: string[];
                finalized_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finality_branch: string[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                next_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                next_sync_committee_branch: string[];
                finalized_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finality_branch: string[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }>;
          }[];
          'application/octet-stream': unknown;
        };
      };
      /** Malformed or missing request parameter */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests the latest [`LightClientFinalityUpdate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/sync-protocol.md#lightclientfinalityupdate) known by the server.
   * Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.
   *
   * Servers SHOULD provide results as defined in [`create_light_client_finality_update`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/full-node.md#create_light_client_finality_update).
   */
  getLightClientFinalityUpdate: {
    responses: {
      /** Success */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<{
              attested_header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                beacon: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
              };
              finalized_header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                beacon: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
              };
              finality_branch: string[];
              /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
              sync_aggregate: {
                /**
                 * Format: hex
                 * @description Aggregation bits of sync
                 * @example 0x01
                 */
                sync_committee_bits: string;
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                sync_committee_signature: string;
              };
              /** @example 1 */
              signature_slot: string;
            }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finalized_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finality_branch: string[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finalized_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finality_branch: string[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finalized_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                finality_branch: string[];
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }>;
          };
          'application/octet-stream': unknown;
        };
      };
      /** No `LightClientFinalityUpdate` is available */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests the latest [`LightClientOptimisticUpdate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/sync-protocol.md#lightclientoptimisticupdate) known by the server.
   * Depending on the `Accept` header it can be returned either as JSON or SSZ-serialized bytes.
   *
   * Servers SHOULD provide results as defined in [`create_light_client_optimistic_update`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/light-client/full-node.md#create_light_client_optimistic_update).
   */
  getLightClientOptimisticUpdate: {
    responses: {
      /** Success */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<{
              attested_header: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                beacon: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
              };
              /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
              sync_aggregate: {
                /**
                 * Format: hex
                 * @description Aggregation bits of sync
                 * @example 0x01
                 */
                sync_committee_bits: string;
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                sync_committee_signature: string;
              };
              /** @example 1 */
              signature_slot: string;
            }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }> &
              Partial<{
                attested_header: {
                  /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                  beacon: {
                    /**
                     * @description The slot to which this block corresponds.
                     * @example 1
                     */
                    slot: string;
                    /**
                     * @description Index of validator in validator registry.
                     * @example 1
                     */
                    proposer_index: string;
                    /**
                     * Format: hex
                     * @description The signing merkle root of the parent `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_root: string;
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                  } & {
                    /**
                     * Format: hex
                     * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    body_root: string;
                  };
                  /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                  execution: {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    parent_hash: string;
                    /**
                     * Format: hex
                     * @description An address on the execution (Ethereum 1) network.
                     * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                     */
                    fee_recipient: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    state_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    receipts_root: string;
                    /**
                     * Format: hex
                     * @example 0x
                     */
                    logs_bloom: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    prev_randao: string;
                    /** @example 1 */
                    block_number: string;
                    /** @example 1 */
                    gas_limit: string;
                    /** @example 1 */
                    gas_used: string;
                    /** @example 1 */
                    timestamp: string;
                    /**
                     * Format: hex
                     * @description Extra data on the execution (Ethereum 1) network.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    extra_data: string;
                    /** @example 1 */
                    base_fee_per_gas: string;
                    /** @example 1 */
                    excess_blob_gas: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  } & {
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    transactions_root: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    withdrawals_root: string;
                  };
                  execution_branch: string[];
                };
                /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                sync_aggregate: {
                  /**
                   * Format: hex
                   * @description Aggregation bits of sync
                   * @example 0x01
                   */
                  sync_committee_bits: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  sync_committee_signature: string;
                };
                /** @example 1 */
                signature_slot: string;
              }>;
          };
          'application/octet-stream': unknown;
        };
      };
      /** No `LightClientOptimisticUpdate` is available */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves attestations known by the node but not necessarily incorporated into any block */
  getPoolAttestations: {
    parameters: {
      query: {
        slot?: string;
        committee_index?: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * Format: hex
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits: string;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description BLS aggregate signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
          };
        };
      };
      /** The slot or committee index could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Submits Attestation objects to the node.  Each attestation in the request body is processed individually.
   *
   * If an attestation is validated successfully the node MUST publish that attestation on the appropriate subnet.
   *
   * If one or more attestations fail validation the node MUST return a 400 error with details of which attestations have failed, and why.
   */
  submitPoolAttestations: {
    responses: {
      /** Attestations are stored in pool and broadcast on appropriate subnet */
      200: unknown;
      /** Errors with one or more attestations */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /**
             * @description Message describing error
             * @example some failures
             */
            message: string;
            /** @description List of individual items that have failed */
            failures: {
              /**
               * @description Index of item in the request list that caused the error
               * @example 3
               */
              index: number;
              /**
               * @description Message describing error
               * @example invalid signature
               */
              message: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: hex
           * @description Attester aggregation bits.
           * @example 0x01
           */
          aggregation_bits: string;
          /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
          data: {
            /** @example 1 */
            slot: string;
            /** @example 1 */
            index: string;
            /**
             * Format: hex
             * @description LMD GHOST vote.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            beacon_block_root: string;
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            source: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            target: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
          };
          /**
           * Format: hex
           * @description BLS aggregate signature.
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      };
    };
  };
  /** Retrieves attestations known by the node but not necessarily incorporated into any block */
  getPoolAttestationsV2: {
    parameters: {
      query: {
        slot?: string;
        committee_index?: string;
      };
    };
    responses: {
      /** Successful response */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<
              {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description BLS aggregate signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              }[]
            > &
              Partial<
                {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                  /**
                   * Format: hex
                   * @description Committee bits.
                   * @example 0x0000000000000001
                   */
                  committee_bits: string;
                }[]
              >;
          };
        };
      };
      /** The slot or committee index could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Submits attestations to the node. Each attestation in the request body is processed individually.
   *
   * If an attestation is validated successfully, the node MUST publish that attestation on the appropriate subnet.
   *
   * If one or more attestations fail validation, the node MUST return a 400 error with details of which attestations have failed, and why.
   */
  submitPoolAttestationsV2: {
    parameters: {
      header: {
        /** The consensus version to which the attestations being submitted belong. */
        'Eth-Consensus-Version':
          | 'phase0'
          | 'altair'
          | 'bellatrix'
          | 'capella'
          | 'deneb'
          | 'electra';
      };
    };
    responses: {
      /** Attestations are stored in pool and broadcast on the appropriate subnet */
      200: unknown;
      /** Errors with one or more attestations */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /**
             * @description Message describing error
             * @example some failures
             */
            message: string;
            /** @description List of individual items that have failed */
            failures: {
              /**
               * @description Index of item in the request list that caused the error
               * @example 3
               */
              index: number;
              /**
               * @description Message describing error
               * @example invalid signature
               */
              message: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': Partial<
          {
            /**
             * Format: hex
             * @description Attester aggregation bits.
             * @example 0x01
             */
            aggregation_bits: string;
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description BLS aggregate signature.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[]
        > &
          Partial<
            {
              /**
               * @description The attestations committee index.
               * @example 1
               */
              committee_index: string;
              /**
               * @description The validator index that signed this attestation.
               * @example 1
               */
              attester_index: string;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description BLS aggregate signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[]
          >;
      };
    };
  };
  /** Retrieves attester slashings known by the node but not necessarily incorporated into any block */
  getPoolAttesterSlashings: {
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data: {
              /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
              attestation_1: {
                /** @description Attesting validator indices */
                attesting_indices: string[];
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
              /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
              attestation_2: {
                /** @description Attesting validator indices */
                attesting_indices: string[];
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Submits AttesterSlashing object to node's pool and if passes validation node MUST broadcast it to network. */
  submitPoolAttesterSlashings: {
    responses: {
      /** Success */
      200: unknown;
      /** Invalid attester slashing */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        };
      };
    };
  };
  /** Retrieves attester slashings known by the node but not necessarily incorporated into any block */
  getPoolAttesterSlashingsV2: {
    responses: {
      /** Successful response */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<
              {
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_1: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
                /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                attestation_2: {
                  /** @description Attesting validator indices */
                  attesting_indices: string[];
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                };
              }[]
            > &
              Partial<
                {
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_1: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                  /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                  attestation_2: {
                    /** @description Attesting validator indices */
                    attesting_indices: string[];
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  };
                }[]
              >;
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Submits AttesterSlashing object to node's pool. Upon successful validation the node MUST broadcast it to network. */
  submitPoolAttesterSlashingsV2: {
    parameters: {
      header: {
        /** The active consensus version to which the attester slashing being submitted belongs. */
        'Eth-Consensus-Version':
          | 'phase0'
          | 'altair'
          | 'bellatrix'
          | 'capella'
          | 'deneb'
          | 'electra';
      };
    };
    responses: {
      /** Success */
      200: unknown;
      /** Invalid attester slashing */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': Partial<{
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_1: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
          attestation_2: {
            /** @description Attesting validator indices */
            attesting_indices: string[];
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
            /**
             * Format: hex
             * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        }> &
          Partial<{
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_1: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
            /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
            attestation_2: {
              /** @description Attesting validator indices */
              attesting_indices: string[];
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          }>;
      };
    };
  };
  /** Retrieves proposer slashings known by the node but not necessarily incorporated into any block */
  getPoolProposerSlashings: {
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data: {
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_header_1: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
              /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
              signed_header_2: {
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                message: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Submits ProposerSlashing object to node's pool and if passes validation  node MUST broadcast it to network. */
  submitPoolProposerSlashings: {
    responses: {
      /** Success */
      200: unknown;
      /** Invalid proposer slashing */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_1: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
          /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
          signed_header_2: {
            /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
            message: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              proposer_index: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              state_root: string;
            } & {
              /**
               * Format: hex
               * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              body_root: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          };
        };
      };
    };
  };
  /**
   * Submits sync committee signature objects to the node.
   *
   * Sync committee signatures are not present in phase0, but are required for Altair networks.
   *
   * If a sync committee signature is validated successfully the node MUST publish that sync committee signature on all applicable subnets.
   *
   * If one or more sync committee signatures fail validation the node MUST return a 400 error with details of which sync committee signatures have failed, and why.
   */
  submitPoolSyncCommitteeSignatures: {
    responses: {
      /** Sync committee signatures are stored in pool and broadcast on appropriate subnet */
      200: unknown;
      /** Errors with one or more sync committee signatures */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /**
             * @description Message describing error
             * @example some failures
             */
            message: string;
            /** @description List of individual items that have failed */
            failures: {
              /**
               * @description Index of item in the request list that caused the error
               * @example 3
               */
              index: number;
              /**
               * @description Message describing error
               * @example invalid signature
               */
              message: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @example 1 */
          slot: string;
          /**
           * Format: hex
           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
           */
          beacon_block_root: string;
          /** @example 1 */
          validator_index: string;
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      };
    };
  };
  /** Retrieves voluntary exits known by the node but not necessarily incorporated into any block */
  getPoolVoluntaryExits: {
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data: {
              /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
              message: {
                /**
                 * @description Minimum epoch for processing exit.
                 * @example 1
                 */
                epoch: string;
                /**
                 * @description Index of the exiting validator.
                 * @example 1
                 */
                validator_index: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Submits SignedVoluntaryExit object to node's pool and if passes validation node MUST broadcast it to network. */
  submitPoolVoluntaryExit: {
    responses: {
      /** Voluntary exit is stored in node and broadcasted to network */
      200: unknown;
      /** Invalid voluntary exit */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
          message: {
            /**
             * @description Minimum epoch for processing exit.
             * @example 1
             */
            epoch: string;
            /**
             * @description Index of the exiting validator.
             * @example 1
             */
            validator_index: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        };
      };
    };
  };
  /** Retrieves BLS to execution changes known by the node but not necessarily incorporated into any block */
  getPoolBLSToExecutionChanges: {
    responses: {
      /** Successful response */
      200: {
        content: {
          'application/json': {
            data: {
              /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
              message: {
                /**
                 * @description Index of the validator for which credentials will be changed.
                 * @example 1
                 */
                validator_index: string;
                /**
                 * Format: hex
                 * @description Public key of existing credentials.
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                from_bls_pubkey: string;
                /**
                 * Format: hex
                 * @description Execution address to which the credentials will be changed.
                 * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                 */
                to_execution_address: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Submits a list of SignedBLSToExecutionChange objects to node's pool. Any that pass validation MUST be broadcast to the network. */
  submitPoolBLSToExecutionChange: {
    responses: {
      /** BLS to execution changes were all stored to the pool and broadcast on the appropriate subnet. */
      200: unknown;
      /** Errors in one or more BLS to execution changes */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /**
             * @description Message describing error
             * @example some failures
             */
            message: string;
            /** @description List of individual items that have failed */
            failures: {
              /**
               * @description Index of item in the request list that caused the error
               * @example 3
               */
              index: number;
              /**
               * @description Message describing error
               * @example invalid signature
               */
              message: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
          message: {
            /**
             * @description Index of the validator for which credentials will be changed.
             * @example 1
             */
            validator_index: string;
            /**
             * Format: hex
             * @description Public key of existing credentials.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            from_bls_pubkey: string;
            /**
             * Format: hex
             * @description Execution address to which the credentials will be changed.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            to_execution_address: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      };
    };
  };
  /**
   * Get the withdrawals computed from the specified state, that will be included in the block
   * that gets built on the specified state.
   */
  getNextWithdrawals: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
      query: {
        /** The slot that a block is being built for, with the specified state as the parent. Defaults to the slot after the parent state if not specified. */
        proposal_slot?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: {
              /**
               * @description The index of the withdrawal.
               * @example 1
               */
              index: string;
              /**
               * @description The index of the withdrawing validator.
               * @example 1
               */
              validator_index: string;
              /**
               * Format: hex
               * @description The address to which the withdrawal is credited.
               * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
               */
              address: string;
              /**
               * @description The value withdrawn (gwei).
               * @example 1
               */
              amount: string;
            }[];
          };
          'application/octet-stream': unknown;
        };
      };
      /** An error occurred preparing the withdrawals from the specified state for the proposal slot. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Returns full BeaconState object for given stateId.
   * Depending on `Accept` header it can be returned either as json or as bytes serialized by SSZ
   */
  getStateV2: {
    parameters: {
      path: {
        /**
         * State identifier.
         * Can be one of: "head" (canonical head in node's view), "genesis", "finalized", "justified", \<slot\>, \<hex encoded stateRoot with 0x prefix\>.
         */
        state_id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            /**
             * @description True if the response references the finalized history of the chain, as determined by fork choice. If the field is not present, additional calls are necessary to compare the epoch of the requested information with the finalized checkpoint.
             * @example false
             */
            finalized: boolean;
            data: Partial<{
              /** @example 1 */
              genesis_time: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              genesis_validators_root: string;
              /** @example 1 */
              slot: string;
              /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
              fork: {
                /**
                 * Format: hex
                 * @description a fork version number
                 * @example 0x00000000
                 */
                previous_version: string;
                /**
                 * Format: hex
                 * @description a fork version number
                 * @example 0x00000000
                 */
                current_version: string;
                /** @example 1 */
                epoch: string;
              };
              /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
              latest_block_header: {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                body_root: string;
              };
              /** @description Fixed length of 8192 items */
              block_roots: string[];
              /** @description Fixed length of 8192 items */
              state_roots: string[];
              /** @description Variable length list, maximum 16777216 items */
              historical_roots: string[];
              /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
              eth1_data: {
                /**
                 * Format: hex
                 * @description Root of the deposit tree.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                deposit_root: string;
                /**
                 * @description Total number of deposits.
                 * @example 1
                 */
                deposit_count: string;
                /**
                 * Format: hex
                 * @description Ethereum 1.x block hash.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                block_hash: string;
              };
              /** @description Fixed length of 1024 items */
              eth1_data_votes: {
                /**
                 * Format: hex
                 * @description Root of the deposit tree.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                deposit_root: string;
                /**
                 * @description Total number of deposits.
                 * @example 1
                 */
                deposit_count: string;
                /**
                 * Format: hex
                 * @description Ethereum 1.x block hash.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                block_hash: string;
              }[];
              /** @example 1 */
              eth1_deposit_index: string;
              /** @description Variable length list, maximum 1099511627776 items */
              validators: {
                /**
                 * Format: hex
                 * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                 * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                 */
                pubkey: string;
                /**
                 * Format: hex
                 * @description Root of withdrawal credentials
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                withdrawal_credentials: string;
                /**
                 * @description Balance at stake in Gwei.
                 * @example 1
                 */
                effective_balance: string;
                /**
                 * @description Was validator slashed (not longer active).
                 * @example false
                 */
                slashed: boolean;
                /**
                 * @description When criteria for activation were met.
                 * @example 1
                 */
                activation_eligibility_epoch: string;
                /**
                 * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                 * @example 1
                 */
                activation_epoch: string;
                /**
                 * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                 * @example 1
                 */
                exit_epoch: string;
                /**
                 * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                 * @example 1
                 */
                withdrawable_epoch: string;
              }[];
              /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
              balances: string[];
              /** @description Fixed length of 65536 items */
              randao_mixes: string[];
              /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
              slashings: string[];
              previous_epoch_attestations: {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /** @example 1 */
                inclusion_delay: string;
                /** @example 1 */
                proposer_index: string;
              }[];
              current_epoch_attestations: {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /** @example 1 */
                inclusion_delay: string;
                /** @example 1 */
                proposer_index: string;
              }[];
              /**
               * Format: hex
               * @description Bit set for every recent justified epoch
               * @example 0x01
               */
              justification_bits: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              previous_justified_checkpoint: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              current_justified_checkpoint: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              finalized_checkpoint: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            }> &
              Partial<{
                /** @example 1 */
                genesis_time: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                genesis_validators_root: string;
                /** @example 1 */
                slot: string;
                /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
                fork: {
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  previous_version: string;
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  current_version: string;
                  /** @example 1 */
                  epoch: string;
                };
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                latest_block_header: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /** @description Fixed length of 8192 items */
                block_roots: string[];
                /** @description Fixed length of 8192 items */
                state_roots: string[];
                /** @description Variable length list, maximum 16777216 items */
                historical_roots: string[];
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /** @description Fixed length of 1024 items */
                eth1_data_votes: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                }[];
                /** @example 1 */
                eth1_deposit_index: string;
                /** @description Variable length list, maximum 1099511627776 items */
                validators: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description Root of withdrawal credentials
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Balance at stake in Gwei.
                   * @example 1
                   */
                  effective_balance: string;
                  /**
                   * @description Was validator slashed (not longer active).
                   * @example false
                   */
                  slashed: boolean;
                  /**
                   * @description When criteria for activation were met.
                   * @example 1
                   */
                  activation_eligibility_epoch: string;
                  /**
                   * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                   * @example 1
                   */
                  activation_epoch: string;
                  /**
                   * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                   * @example 1
                   */
                  exit_epoch: string;
                  /**
                   * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                   * @example 1
                   */
                  withdrawable_epoch: string;
                }[];
                /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
                balances: string[];
                /** @description Fixed length of 65536 items */
                randao_mixes: string[];
                /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
                slashings: string[];
                previous_epoch_participation: string[];
                current_epoch_participation: string[];
                /**
                 * Format: hex
                 * @description Bit set for every recent justified epoch
                 * @example 0x01
                 */
                justification_bits: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                previous_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                current_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                finalized_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description Per-validator inactivity scores. New in Altair. Variable length list, maximum 1099511627776 items */
                inactivity_scores: string[];
                current_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                next_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
              }> &
              Partial<{
                /** @example 1 */
                genesis_time: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                genesis_validators_root: string;
                /** @example 1 */
                slot: string;
                /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
                fork: {
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  previous_version: string;
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  current_version: string;
                  /** @example 1 */
                  epoch: string;
                };
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                latest_block_header: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /** @description Fixed length of 8192 items */
                block_roots: string[];
                /** @description Fixed length of 8192 items */
                state_roots: string[];
                /** @description Variable length list, maximum 16777216 items */
                historical_roots: string[];
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /** @description Fixed length of 1024 items */
                eth1_data_votes: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                }[];
                /** @example 1 */
                eth1_deposit_index: string;
                /** @description Variable length list, maximum 1099511627776 items */
                validators: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description Root of withdrawal credentials
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Balance at stake in Gwei.
                   * @example 1
                   */
                  effective_balance: string;
                  /**
                   * @description Was validator slashed (not longer active).
                   * @example false
                   */
                  slashed: boolean;
                  /**
                   * @description When criteria for activation were met.
                   * @example 1
                   */
                  activation_eligibility_epoch: string;
                  /**
                   * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                   * @example 1
                   */
                  activation_epoch: string;
                  /**
                   * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                   * @example 1
                   */
                  exit_epoch: string;
                  /**
                   * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                   * @example 1
                   */
                  withdrawable_epoch: string;
                }[];
                /** @description Validator balances in Gwei. Variable length list, maximum 1099511627776 items */
                balances: string[];
                /** @description Fixed length of 65536 items */
                randao_mixes: string[];
                /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
                slashings: string[];
                previous_epoch_participation: string[];
                current_epoch_participation: string[];
                /**
                 * Format: hex
                 * @description Bit set for every recent justified epoch
                 * @example 0x01
                 */
                justification_bits: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                previous_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                current_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                finalized_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description Per-validator inactivity scores. Introduced in Altair. Variable length list, maximum 1099511627776 items */
                inactivity_scores: string[];
                current_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                next_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                latest_execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                };
              }> &
              Partial<{
                /** @example 1 */
                genesis_time: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                genesis_validators_root: string;
                /** @example 1 */
                slot: string;
                /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
                fork: {
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  previous_version: string;
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  current_version: string;
                  /** @example 1 */
                  epoch: string;
                };
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                latest_block_header: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /** @description Fixed length of 8192 items */
                block_roots: string[];
                /** @description Fixed length of 8192 items */
                state_roots: string[];
                /** @description Variable length list, maximum 16777216 items. Frozen in Capella, replaced by historical_summaries. */
                historical_roots: string[];
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /** @description Fixed length of 1024 items */
                eth1_data_votes: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                }[];
                /** @example 1 */
                eth1_deposit_index: string;
                /** @description Variable length list, maximum 1099511627776 items */
                validators: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description Root of withdrawal credentials
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Balance at stake in Gwei.
                   * @example 1
                   */
                  effective_balance: string;
                  /**
                   * @description Was validator slashed (not longer active).
                   * @example false
                   */
                  slashed: boolean;
                  /**
                   * @description When criteria for activation were met.
                   * @example 1
                   */
                  activation_eligibility_epoch: string;
                  /**
                   * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                   * @example 1
                   */
                  activation_epoch: string;
                  /**
                   * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                   * @example 1
                   */
                  exit_epoch: string;
                  /**
                   * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                   * @example 1
                   */
                  withdrawable_epoch: string;
                }[];
                /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
                balances: string[];
                /** @description Fixed length of 65536 items */
                randao_mixes: string[];
                /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
                slashings: string[];
                previous_epoch_participation: string[];
                current_epoch_participation: string[];
                /**
                 * Format: hex
                 * @description Bit set for every recent justified epoch
                 * @example 0x01
                 */
                justification_bits: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                previous_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                current_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                finalized_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description Per-validator inactivity scores. Introduced in Altair. Variable length list, maximum 1099511627776 items */
                inactivity_scores: string[];
                current_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                next_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                latest_execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
                /** @example 1 */
                next_withdrawal_index: string;
                /** @example 1 */
                next_withdrawal_validator_index: string;
                /** @description Variable length list, maximum 16777216 items */
                historical_summaries: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_summary_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_summary_root: string;
                }[];
              }> &
              Partial<{
                /** @example 1 */
                genesis_time: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                genesis_validators_root: string;
                /** @example 1 */
                slot: string;
                /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
                fork: {
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  previous_version: string;
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  current_version: string;
                  /** @example 1 */
                  epoch: string;
                };
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                latest_block_header: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /** @description Fixed length of 8192 items */
                block_roots: string[];
                /** @description Fixed length of 8192 items */
                state_roots: string[];
                /** @description Variable length list, maximum 16777216 items. Frozen in Capella, replaced by historical_summaries. */
                historical_roots: string[];
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /** @description Fixed length of 1024 items */
                eth1_data_votes: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                }[];
                /** @example 1 */
                eth1_deposit_index: string;
                /** @description Variable length list, maximum 1099511627776 items */
                validators: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description Root of withdrawal credentials
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Balance at stake in Gwei.
                   * @example 1
                   */
                  effective_balance: string;
                  /**
                   * @description Was validator slashed (not longer active).
                   * @example false
                   */
                  slashed: boolean;
                  /**
                   * @description When criteria for activation were met.
                   * @example 1
                   */
                  activation_eligibility_epoch: string;
                  /**
                   * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                   * @example 1
                   */
                  activation_epoch: string;
                  /**
                   * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                   * @example 1
                   */
                  exit_epoch: string;
                  /**
                   * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                   * @example 1
                   */
                  withdrawable_epoch: string;
                }[];
                /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
                balances: string[];
                /** @description Fixed length of 65536 items */
                randao_mixes: string[];
                /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
                slashings: string[];
                previous_epoch_participation: string[];
                current_epoch_participation: string[];
                /**
                 * Format: hex
                 * @description Bit set for every recent justified epoch
                 * @example 0x01
                 */
                justification_bits: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                previous_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                current_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                finalized_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description Per-validator inactivity scores. Introduced in Altair. Variable length list, maximum 1099511627776 items */
                inactivity_scores: string[];
                current_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                next_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                latest_execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /** @example 1 */
                  excess_blob_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
                /** @example 1 */
                next_withdrawal_index: string;
                /** @example 1 */
                next_withdrawal_validator_index: string;
                /** @description Variable length list, maximum 16777216 items */
                historical_summaries: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_summary_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_summary_root: string;
                }[];
              }> &
              Partial<{
                /** @example 1 */
                genesis_time: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                genesis_validators_root: string;
                /** @example 1 */
                slot: string;
                /** @description The [`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#fork) object from the CL spec. */
                fork: {
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  previous_version: string;
                  /**
                   * Format: hex
                   * @description a fork version number
                   * @example 0x00000000
                   */
                  current_version: string;
                  /** @example 1 */
                  epoch: string;
                };
                /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                latest_block_header: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /**
                   * Format: hex
                   * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  body_root: string;
                };
                /** @description Fixed length of 8192 items */
                block_roots: string[];
                /** @description Fixed length of 8192 items */
                state_roots: string[];
                /** @description Variable length list, maximum 16777216 items. Frozen in Capella, replaced by historical_summaries. */
                historical_roots: string[];
                /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                eth1_data: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                };
                /** @description Fixed length of 1024 items */
                eth1_data_votes: {
                  /**
                   * Format: hex
                   * @description Root of the deposit tree.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  deposit_root: string;
                  /**
                   * @description Total number of deposits.
                   * @example 1
                   */
                  deposit_count: string;
                  /**
                   * Format: hex
                   * @description Ethereum 1.x block hash.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                }[];
                /** @example 1 */
                eth1_deposit_index: string;
                /** @description Variable length list, maximum 1099511627776 items */
                validators: {
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description Root of withdrawal credentials
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description Balance at stake in Gwei.
                   * @example 1
                   */
                  effective_balance: string;
                  /**
                   * @description Was validator slashed (not longer active).
                   * @example false
                   */
                  slashed: boolean;
                  /**
                   * @description When criteria for activation were met.
                   * @example 1
                   */
                  activation_eligibility_epoch: string;
                  /**
                   * @description Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated
                   * @example 1
                   */
                  activation_epoch: string;
                  /**
                   * @description Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.
                   * @example 1
                   */
                  exit_epoch: string;
                  /**
                   * @description When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined
                   * @example 1
                   */
                  withdrawable_epoch: string;
                }[];
                /** @description Validator balances in gwei. Variable length list, maximum 1099511627776 items */
                balances: string[];
                /** @description Fixed length of 65536 items */
                randao_mixes: string[];
                /** @description Per-epoch sums of slashed effective balances. Fixed length of 8192 items */
                slashings: string[];
                previous_epoch_participation: string[];
                current_epoch_participation: string[];
                /**
                 * Format: hex
                 * @description Bit set for every recent justified epoch
                 * @example 0x01
                 */
                justification_bits: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                previous_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                current_justified_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                finalized_checkpoint: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description Per-validator inactivity scores. Introduced in Altair. Variable length list, maximum 1099511627776 items */
                inactivity_scores: string[];
                current_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                next_sync_committee: {
                  pubkeys: string[];
                  /**
                   * Format: hex
                   * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  aggregate_pubkey: string;
                };
                /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                latest_execution_payload_header: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_hash: string;
                  /**
                   * Format: hex
                   * @description An address on the execution (Ethereum 1) network.
                   * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                   */
                  fee_recipient: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  receipts_root: string;
                  /**
                   * Format: hex
                   * @example 0x
                   */
                  logs_bloom: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  prev_randao: string;
                  /** @example 1 */
                  block_number: string;
                  /** @example 1 */
                  gas_limit: string;
                  /** @example 1 */
                  gas_used: string;
                  /** @example 1 */
                  timestamp: string;
                  /**
                   * Format: hex
                   * @description Extra data on the execution (Ethereum 1) network.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  extra_data: string;
                  /** @example 1 */
                  base_fee_per_gas: string;
                  /** @example 1 */
                  excess_blob_gas: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_hash: string;
                } & {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  transactions_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawals_root: string;
                };
                /** @example 1 */
                next_withdrawal_index: string;
                /** @example 1 */
                next_withdrawal_validator_index: string;
                /** @description Variable length list, maximum 16777216 items */
                historical_summaries: {
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  block_summary_root: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_summary_root: string;
                }[];
                /** @example 1 */
                deposit_requests_start_index: string;
                /** @example 1 */
                deposit_balance_to_consume: string;
                /** @example 1 */
                exit_balance_to_consume: string;
                /** @example 1 */
                earliest_exit_epoch: string;
                /** @example 1 */
                consolidation_balance_to_consume: string;
                /** @example 1 */
                earliest_consolidation_epoch: string;
                pending_deposits: {
                  /**
                   * Format: hex
                   * @description BLS public key of validator.
                   * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                   */
                  pubkey: string;
                  /**
                   * Format: hex
                   * @description The withdrawal credentials.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  withdrawal_credentials: string;
                  /**
                   * @description The value to be deposited (gwei).
                   * @example 1
                   */
                  amount: string;
                  /**
                   * Format: hex
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                  /**
                   * @description The slot at which the deposit request was processed.
                   * @example 1
                   */
                  slot: string;
                }[];
                pending_partial_withdrawals: {
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  index: string;
                  /**
                   * @description The value to be withdrawn (gwei).
                   * @example 1
                   */
                  amount: string;
                  /**
                   * @description The epoch when the amount is withdrawable.
                   * @example 1
                   */
                  withdrawable_epoch: string;
                }[];
                pending_consolidations: {
                  /**
                   * @description Index of validator to consolidate from.
                   * @example 1
                   */
                  source_index: string;
                  /**
                   * @description Index of validator to consolidate to.
                   * @example 1
                   */
                  target_index: string;
                }[];
              }>;
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid state ID */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** State not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves all possible chain heads (leaves of fork choice tree). */
  getDebugChainHeadsV2: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
              /** @example 1 */
              slot: string;
              /**
               * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
               * @example false
               */
              execution_optimistic: boolean;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves all current fork choice context. */
  getDebugForkChoice: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            justified_checkpoint: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
            finalized_checkpoint: {
              /** @example 1 */
              epoch: string;
              /**
               * Format: hex
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              root: string;
            };
            /** @description Fork choice nodes */
            fork_choice_nodes: {
              /**
               * @description The slot to which this block corresponds.
               * @example 1
               */
              slot: string;
              /**
               * Format: hex
               * @description The signing merkle root of the `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              block_root: string;
              /**
               * Format: hex
               * @description The signing merkle root of the parent `BeaconBlock`.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              parent_root: string;
              /** @example 1 */
              justified_epoch: string;
              /** @example 1 */
              finalized_epoch: string;
              /** @example 1 */
              weight: string;
              /** @enum {string} */
              validity: 'valid' | 'invalid' | 'optimistic';
              /**
               * Format: hex
               * @description The `block_hash` from the `execution_payload` of the `BeaconBlock`
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              execution_block_hash: string;
              /** @description Optional extra data that clients may provide, which could differ from client to client. */
              extra_data?: { [key: string]: unknown };
            }[];
            /** @description Optional extra data that clients may provide, which could differ from client to client. */
            extra_data?: { [key: string]: unknown };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves data about the node's network presence */
  getNetworkIdentity: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
               * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
               */
              peer_id: string;
              /**
               * @description Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)
               * @example enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8
               */
              enr: string;
              p2p_addresses: string[];
              discovery_addresses: string[];
              /** @description Based on eth2 [Metadata object](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/p2p-interface.md#metadata) */
              metadata: {
                /**
                 * @description Uint64 starting at 0 used to version the node's metadata. If any other field in the local MetaData changes, the node MUST increment seq_number by 1.
                 * @example 1
                 */
                seq_number: string;
                /**
                 * Format: hex
                 * @description Bitvector representing the node's persistent attestation subnet subscriptions.
                 * @example 0x0000000000000000
                 */
                attnets: string;
                /**
                 * Format: hex
                 * @description Bitvector representing the node's sync committee subnet subscriptions. This metadata is not present in phase0, but will be present in Altair.
                 * @example 0x0f
                 */
                syncnets?: string;
              };
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves data about the node's network peers. By default this returns all peers. Multiple query params are combined using AND conditions */
  getPeers: {
    parameters: {
      query: {
        state?: (
          | 'disconnected'
          | 'connecting'
          | 'connected'
          | 'disconnecting'
        )[];
        direction?: ('inbound' | 'outbound')[];
      };
    };
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
               * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
               */
              peer_id: string;
              enr: unknown | string;
              /**
               * @description Multiaddrs used in last peer connection.
               * @example /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
               */
              last_seen_p2p_address: string;
              /** @enum {string} */
              state:
                | 'disconnected'
                | 'connecting'
                | 'connected'
                | 'disconnecting';
              /** @enum {string} */
              direction: 'inbound' | 'outbound';
            }[];
            meta: {
              /**
               * @description Total number of items
               * @example 1
               */
              count: number;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves data about the given peer */
  getPeer: {
    parameters: {
      path: {
        peer_id: string;
      };
    };
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)
               * @example QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
               */
              peer_id: string;
              enr: unknown | string;
              /**
               * @description Multiaddrs used in last peer connection.
               * @example /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N
               */
              last_seen_p2p_address: string;
              /** @enum {string} */
              state:
                | 'disconnected'
                | 'connecting'
                | 'connected'
                | 'disconnecting';
              /** @enum {string} */
              direction: 'inbound' | 'outbound';
            };
          };
        };
      };
      /** The peer ID supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Peer not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieves number of known peers. */
  getPeerCount: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data: {
              /** @example 12 */
              disconnected: string;
              /** @example 34 */
              connecting: string;
              /** @example 56 */
              connected: string;
              /** @example 5 */
              disconnecting: string;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field. */
  getNodeVersion: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).
               * @example Lighthouse/v0.1.5 (Linux x86_64)
               */
              version: string;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to. */
  getSyncingStatus: {
    responses: {
      /** Request successful */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description Head slot node is trying to reach
               * @example 1
               */
              head_slot: string;
              /**
               * @description How many slots node needs to process to reach head. 0 if synced.
               * @example 1
               */
              sync_distance: string;
              /** @description Set to true if the node is syncing, false if the node is synced. */
              is_syncing: boolean;
              /** @description Set to true if the node is optimistically tracking head. */
              is_optimistic: boolean;
              /** @description Set to true if the execution client is offline. */
              el_offline: boolean;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Returns node health status in http status codes. Useful for load balancers. */
  getHealth: {
    parameters: {
      query: {
        /** Customize syncing status instead of default status code (206) */
        syncing_status?: number;
      };
    };
    responses: {
      /** Node is ready */
      200: unknown;
      /** Either the beacon node is syncing, or its execution node is optimistic or offline, so data served may be incorrect */
      206: unknown;
      /** Invalid syncing status code */
      400: unknown;
      /** Node not initialized or having issues */
      503: unknown;
    };
  };
  /** Retrieve all forks, past present and future, of which this node is aware. */
  getForkSchedule: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * Format: hex
               * @description a fork version number
               * @example 0x00000000
               */
              previous_version: string;
              /**
               * Format: hex
               * @description a fork version number
               * @example 0x00000000
               */
              current_version: string;
              /** @example 1 */
              epoch: string;
            }[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Retrieve specification configuration used on this node.  The configuration should include:
   *   - Constants for all hard forks known by the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#constants) and [altair](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#constants) values
   *   - Presets for all hard forks supplied to the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/v1.3.0/presets/mainnet/phase0.yaml) and [altair](https://github.com/ethereum/consensus-specs/blob/v1.3.0/presets/mainnet/altair.yaml) values
   *   - Configuration for the beacon node, for example the [mainnet](https://github.com/ethereum/consensus-specs/blob/v1.3.0/configs/mainnet.yaml) values
   *
   * Values are returned with following format:
   *   - any value starting with 0x in the spec is returned as a hex string
   *   - numeric values are returned as a quoted integer
   */
  getSpec: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            /**
             * @description Key value mapping of all constants, presets and configuration values for all known hard forks
             * Values are returned with following format:
             *   - any value starting with 0x in the spec is returned as a hex string
             *   - numeric values are returned as a quoted integer
             *
             * @example {
             *   "DEPOSIT_CONTRACT_ADDRESS": "0x00000000219ab540356cBB839Cbe05303d7705Fa",
             *   "DEPOSIT_NETWORK_ID": "1",
             *   "DOMAIN_AGGREGATE_AND_PROOF": "0x06000000",
             *   "INACTIVITY_PENALTY_QUOTIENT": "67108864",
             *   "INACTIVITY_PENALTY_QUOTIENT_ALTAIR": "50331648"
             * }
             */
            data: { [key: string]: unknown };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Retrieve Eth1 deposit contract address and chain ID. */
  getDepositContract: {
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description Id of Eth1 chain on which contract is deployed.
               * @example 1
               */
              chain_id: string;
              /**
               * Format: hex
               * @description Hex encoded deposit contract address with 0x prefix
               * @example 0x00000000219ab540356cBB839Cbe05303d7705Fa
               */
              address: string;
            };
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch.
   * Duties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:
   * - event.previous_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`
   * - event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) + 1 == epoch`
   * - event.block otherwise
   *
   * The dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root in the case of underflow.
   */
  getAttesterDuties: {
    parameters: {
      path: {
        /** Should only be allowed 1 epoch ahead */
        epoch: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            /**
             * Format: hex
             * @description The block root that this response is dependent on.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            dependent_root: string;
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * @description Index of validator in validator registry
               * @example 1
               */
              validator_index: string;
              /**
               * @description The committee index
               * @example 1
               */
              committee_index: string;
              /**
               * @description Number of validators in committee
               * @example 1
               */
              committee_length: string;
              /**
               * @description Number of committees at the provided slot
               * @example 1
               */
              committees_at_slot: string;
              /**
               * @description Index of validator in committee
               * @example 1
               */
              validator_committee_index: string;
              /**
               * @description The slot at which the validator must attest.
               * @example 1
               */
              slot: string;
            }[];
          };
        };
      };
      /** Invalid epoch or index */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** An array of the validator indices for which to obtain the duties. */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /**
   * Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.
   * Duties should only need to be checked once per epoch, however a chain reorganization could occur that results in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:
   * - event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`
   * - event.block otherwise
   *
   * The dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in the case of underflow.
   */
  getProposerDuties: {
    parameters: {
      path: {
        epoch: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            /**
             * Format: hex
             * @description The block root that this response is dependent on.
             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
             */
            dependent_root: string;
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              validator_index: string;
              /**
               * @description The slot at which the validator must propose block.
               * @example 1
               */
              slot: string;
            }[];
          };
        };
      };
      /** Invalid epoch */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Requests the beacon node to provide a set of sync committee duties for a particular epoch. */
  getSyncCommitteeDuties: {
    parameters: {
      path: {
        /** epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1 */
        epoch: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            /**
             * @description True if the response references an unverified execution payload. Optimistic information may be invalidated at a later time. If the field is not present, assume the False value.
             * @example false
             */
            execution_optimistic: boolean;
            data: {
              /**
               * Format: hex
               * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
               * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
               */
              pubkey: string;
              /**
               * @description Index of validator in validator registry.
               * @example 1
               */
              validator_index: string;
              /** @description The indices of the validator in the sync committee. */
              validator_sync_committee_indices: string[];
            }[];
          };
        };
      };
      /** Invalid epoch or index */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** An array of the validator indices for which to obtain the duties. */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /**
   * Requests a beacon node to produce a valid block, which can then be signed by a validator.
   *
   * Metadata in the response indicates the type of block produced, and the supported types of block
   * will be added to as forks progress.
   */
  produceBlockV2: {
    parameters: {
      path: {
        /** The slot for which the block should be proposed. */
        slot: string;
      };
      query: {
        /** The validator's randao reveal value. */
        randao_reveal: string;
        /** Arbitrary data validator wants to include in block. */
        graffiti?: string;
        /**
         * Skip verification of the `randao_reveal` value. If this flag is set then the
         * `randao_reveal` must be set to the point at infinity (`0xc0..00`).
         */
        skip_randao_verification?: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<
              {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                body: {
                  /**
                   * Format: hex
                   * @description The RanDAO reveal value provided by the validator.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  randao_reveal: string;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                };
              }
            > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                  };
                }
              > &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
                block: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                  };
                };
                kzg_proofs: string[];
                blobs: string[];
              }> &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec. */
                block: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                      /**
                       * Format: hex
                       * @description Committee bits.
                       * @example 0x0000000000000001
                       */
                      committee_bits: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                    /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                    execution_requests: {
                      deposits: {
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description The value to be deposited (gwei).
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                        /**
                         * @description The index of the deposit request.
                         * @example 1
                         */
                        index: string;
                      }[];
                      withdrawals: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        validator_pubkey: string;
                        /**
                         * @description The value to be withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                      consolidations: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate from.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        source_pubkey: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate to.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        target_pubkey: string;
                      }[];
                    };
                  };
                };
                kzg_proofs: string[];
                blobs: string[];
              }>;
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid block production request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests a beacon node to produce a valid block, which can then be signed by a validator. The
   * returned block may be blinded or unblinded, depending on the current state of the network as
   * decided by the execution and beacon nodes.
   *
   * The beacon node must return an unblinded block if it obtains the execution payload from its
   * paired execution node. It must only return a blinded block if it obtains the execution payload
   * header from an MEV relay.
   *
   * Metadata in the response indicates the type of block produced, and the supported types of block
   * will be added to as forks progress.
   */
  produceBlockV3: {
    parameters: {
      path: {
        /** The slot for which the block should be proposed. */
        slot: string;
      };
      query: {
        /** The validator's randao reveal value. */
        randao_reveal: string;
        /** Arbitrary data validator wants to include in block. */
        graffiti?: string;
        /**
         * Skip verification of the `randao_reveal` value. If this flag is set then the
         * `randao_reveal` must be set to the point at infinity (`0xc0..00`).
         */
        skip_randao_verification?: string;
        /**
         * Percentage multiplier to apply to the builder's payload value when choosing between a
         * builder payload header and payload from the paired execution node. This parameter is only
         * relevant if the beacon node is connected to a builder, deems it safe to produce a builder
         * payload, and receives valid responses from both the builder endpoint _and_ the paired
         * execution node. When these preconditions are met, the server MUST act as follows:
         *
         * * if `exec_node_payload_value >= builder_boost_factor * (builder_payload_value // 100)`,
         *   then return a full (unblinded) block containing the execution node payload.
         * * otherwise, return a blinded block containing the builder payload header.
         *
         * Servers must support the following values of the boost factor which encode common
         * preferences:
         *
         * * `builder_boost_factor=0`: prefer the local execution node payload unless an error makes it
         *   unviable.
         * * `builder_boost_factor=100`: profit maximization mode; choose whichever
         *   payload pays more.
         * * `builder_boost_factor=2**64 - 1`: prefer the external builder payload unless an error or
         *   beacon node health check makes it unviable.
         *
         * Servers should use saturating arithmetic or another technique to ensure that large values of
         * the `builder_boost_factor` do not trigger overflows or errors. If this parameter is
         * provided and the beacon node is not configured with a builder then the beacon node MUST
         * respond with a full block, which the caller can choose to reject if it wishes.
         * If the value is provided but out of range for a 64-bit unsigned integer, then an error
         * response with status code 400 MUST be returned.
         */
        builder_boost_factor?: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
          /** Required in response so client can deserialize returned json or ssz data to the correct object. */
          'Eth-Execution-Payload-Blinded': boolean;
          /**
           * Execution payload value in Wei. Required in response so client can determine relative value
           * of execution payloads.
           */
          'Eth-Execution-Payload-Value': string;
          /**
           * Consensus rewards paid to the proposer for this block, in Wei. Required in response so
           * client can determine relative value of consensus blocks.
           */
          'Eth-Consensus-Block-Value': string;
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            /** @example false */
            execution_payload_blinded: boolean;
            /** @example 12345 */
            execution_payload_value: string;
            /** @example 12345 */
            consensus_block_value: string;
            data: Partial<
              {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                body: {
                  /**
                   * Format: hex
                   * @description The RanDAO reveal value provided by the validator.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  randao_reveal: string;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                };
              }
            > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#beaconblockbody) object from the CL Capella spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                  };
                }
              > &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md#beaconblock) object from the CL Deneb spec. */
                block: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                  };
                };
                kzg_proofs: string[];
                blobs: string[];
              }> &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#beaconblockbody) object from the CL Deneb spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                  };
                }
              > &
              Partial<{
                /** @description The [`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/phase0/beacon-chain.md#beaconblock) object from the CL Electra spec. */
                block: {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                      /**
                       * Format: hex
                       * @description Committee bits.
                       * @example 0x0000000000000001
                       */
                      committee_bits: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    execution_payload: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      transactions: string[];
                      withdrawals: {
                        /**
                         * @description The index of the withdrawal.
                         * @example 1
                         */
                        index: string;
                        /**
                         * @description The index of the withdrawing validator.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description The address to which the withdrawal is credited.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        address: string;
                        /**
                         * @description The value withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                    };
                    /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                    execution_requests: {
                      deposits: {
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description The value to be deposited (gwei).
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                        /**
                         * @description The index of the deposit request.
                         * @example 1
                         */
                        index: string;
                      }[];
                      withdrawals: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        validator_pubkey: string;
                        /**
                         * @description The value to be withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                      consolidations: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate from.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        source_pubkey: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate to.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        target_pubkey: string;
                      }[];
                    };
                  };
                };
                kzg_proofs: string[];
                blobs: string[];
              }> &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/electra/beacon-chain.md#beaconblockbody) object from the CL Electra spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                      /**
                       * Format: hex
                       * @description Committee bits.
                       * @example 0x0000000000000001
                       */
                      committee_bits: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                    /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                    execution_requests: {
                      deposits: {
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description The value to be deposited (gwei).
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                        /**
                         * @description The index of the deposit request.
                         * @example 1
                         */
                        index: string;
                      }[];
                      withdrawals: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        validator_pubkey: string;
                        /**
                         * @description The value to be withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                      consolidations: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate from.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        source_pubkey: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate to.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        target_pubkey: string;
                      }[];
                    };
                  };
                }
              >;
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid block production request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests a beacon node to produce a valid blinded block, which can then be signed by a validator.
   * A blinded block is a block with only a transactions root, rather than a full transactions list.
   *
   * Metadata in the response indicates the type of block produced, and the supported types of block
   * will be added to as forks progress.
   *
   * Before Bellatrix, this endpoint will return a `BeaconBlock`.
   */
  produceBlindedBlock: {
    parameters: {
      path: {
        /** The slot for which the block should be proposed. */
        slot: string;
      };
      query: {
        /** The validator's randao reveal value. */
        randao_reveal: string;
        /** Arbitrary data validator wants to include in block. */
        graffiti?: string;
        /**
         * Skip verification of the `randao_reveal` value. If this flag is set then the
         * `randao_reveal` must be set to the point at infinity (`0xc0..00`).
         */
        skip_randao_verification?: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example bellatrix
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<
              {
                /**
                 * @description The slot to which this block corresponds.
                 * @example 1
                 */
                slot: string;
                /**
                 * @description Index of validator in validator registry.
                 * @example 1
                 */
                proposer_index: string;
                /**
                 * Format: hex
                 * @description The signing merkle root of the parent `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                parent_root: string;
                /**
                 * Format: hex
                 * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                state_root: string;
              } & {
                /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockbody) object from the CL spec. */
                body: {
                  /**
                   * Format: hex
                   * @description The RanDAO reveal value provided by the validator.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  randao_reveal: string;
                  /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                  eth1_data: {
                    /**
                     * Format: hex
                     * @description Root of the deposit tree.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    deposit_root: string;
                    /**
                     * @description Total number of deposits.
                     * @example 1
                     */
                    deposit_count: string;
                    /**
                     * Format: hex
                     * @description Ethereum 1.x block hash.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    block_hash: string;
                  };
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  graffiti: string;
                  proposer_slashings: {
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_1: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                    signed_header_2: {
                      /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                      message: {
                        /**
                         * @description The slot to which this block corresponds.
                         * @example 1
                         */
                        slot: string;
                        /**
                         * @description Index of validator in validator registry.
                         * @example 1
                         */
                        proposer_index: string;
                        /**
                         * Format: hex
                         * @description The signing merkle root of the parent `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        parent_root: string;
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        state_root: string;
                      } & {
                        /**
                         * Format: hex
                         * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        body_root: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attester_slashings: {
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_1: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                    /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                    attestation_2: {
                      /** @description Attesting validator indices */
                      attesting_indices: string[];
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  attestations: {
                    /**
                     * Format: hex
                     * @description Attester aggregation bits.
                     * @example 0x01
                     */
                    aggregation_bits: string;
                    /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                    data: {
                      /** @example 1 */
                      slot: string;
                      /** @example 1 */
                      index: string;
                      /**
                       * Format: hex
                       * @description LMD GHOST vote.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      beacon_block_root: string;
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      source: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                      /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                      target: {
                        /** @example 1 */
                        epoch: string;
                        /**
                         * Format: hex
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        root: string;
                      };
                    };
                    /**
                     * Format: hex
                     * @description BLS aggregate signature.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                  deposits: {
                    /** @description Branch in the deposit tree. */
                    proof: string[];
                    /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                    data: {
                      /**
                       * Format: hex
                       * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                       * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                       */
                      pubkey: string;
                      /**
                       * Format: hex
                       * @description The withdrawal credentials.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawal_credentials: string;
                      /**
                       * @description Amount in Gwei.
                       * @example 1
                       */
                      amount: string;
                      /**
                       * Format: hex
                       * @description Container self-signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    };
                  }[];
                  voluntary_exits: {
                    /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                    message: {
                      /**
                       * @description Minimum epoch for processing exit.
                       * @example 1
                       */
                      epoch: string;
                      /**
                       * @description Index of the exiting validator.
                       * @example 1
                       */
                      validator_index: string;
                    };
                    /**
                     * Format: hex
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    signature: string;
                  }[];
                };
              }
            > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description The [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#beaconblockbody) object from the CL Altair spec. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#beaconblockbody) object from the CL Bellatrix spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayloadheader) object from the CL Bellatrix spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#beaconblockbody) object from the CL Capella spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    /**
                     * Format: hex
                     * @description The RanDAO reveal value provided by the validator.
                     * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                     */
                    randao_reveal: string;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayloadheader) object from the CL Capella spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#beaconblockbody) object from the CL Deneb spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                  };
                }
              > &
              Partial<
                {
                  /**
                   * @description The slot to which this block corresponds.
                   * @example 1
                   */
                  slot: string;
                  /**
                   * @description Index of validator in validator registry.
                   * @example 1
                   */
                  proposer_index: string;
                  /**
                   * Format: hex
                   * @description The signing Merkle root of the parent `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  parent_root: string;
                  /**
                   * Format: hex
                   * @description The tree hash Merkle root of the `BeaconState` for the `BeaconBlock`.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  state_root: string;
                } & {
                  /** @description A variant of the [`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.5/specs/electra/beacon-chain.md#beaconblockbody) object from the CL Electra spec, which contains a transactions root rather than a full transactions list. */
                  body: {
                    randao_reveal: string & unknown;
                    /** @description The [`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#eth1data) object from the CL spec. */
                    eth1_data: {
                      /**
                       * Format: hex
                       * @description Root of the deposit tree.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      deposit_root: string;
                      /**
                       * @description Total number of deposits.
                       * @example 1
                       */
                      deposit_count: string;
                      /**
                       * Format: hex
                       * @description Ethereum 1.x block hash.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    };
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    graffiti: string;
                    proposer_slashings: {
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_1: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#signedbeaconblockheader) object envelope from the CL spec. */
                      signed_header_2: {
                        /** @description The [`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#beaconblockheader) object from the CL spec. */
                        message: {
                          /**
                           * @description The slot to which this block corresponds.
                           * @example 1
                           */
                          slot: string;
                          /**
                           * @description Index of validator in validator registry.
                           * @example 1
                           */
                          proposer_index: string;
                          /**
                           * Format: hex
                           * @description The signing merkle root of the parent `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          parent_root: string;
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          state_root: string;
                        } & {
                          /**
                           * Format: hex
                           * @description The tree hash merkle root of the `BeaconBlockBody` for the `BeaconBlock`
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          body_root: string;
                        };
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attester_slashings: {
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_1: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                      /** @description The [`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#indexedattestation) object from the CL spec. */
                      attestation_2: {
                        /** @description Attesting validator indices */
                        attesting_indices: string[];
                        /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                        data: {
                          /** @example 1 */
                          slot: string;
                          /** @example 1 */
                          index: string;
                          /**
                           * Format: hex
                           * @description LMD GHOST vote.
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          beacon_block_root: string;
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          source: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                          /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                          target: {
                            /** @example 1 */
                            epoch: string;
                            /**
                             * Format: hex
                             * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                             */
                            root: string;
                          };
                        };
                        /**
                         * Format: hex
                         * @description The BLS signature of the `IndexedAttestation`, created by the validator of the attestation.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    attestations: {
                      /**
                       * Format: hex
                       * @description Attester aggregation bits.
                       * @example 0x01
                       */
                      aggregation_bits: string;
                      /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                      data: {
                        /** @example 1 */
                        slot: string;
                        /** @example 1 */
                        index: string;
                        /**
                         * Format: hex
                         * @description LMD GHOST vote.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        beacon_block_root: string;
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        source: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                        /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                        target: {
                          /** @example 1 */
                          epoch: string;
                          /**
                           * Format: hex
                           * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                           */
                          root: string;
                        };
                      };
                      /**
                       * Format: hex
                       * @description BLS aggregate signature.
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                      /**
                       * Format: hex
                       * @description Committee bits.
                       * @example 0x0000000000000001
                       */
                      committee_bits: string;
                    }[];
                    deposits: {
                      /** @description Branch in the deposit tree. */
                      proof: string[];
                      /** @description The [`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#depositdata) object from the CL spec. */
                      data: {
                        /**
                         * Format: hex
                         * @description The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description Amount in Gwei.
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @description Container self-signature.
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                      };
                    }[];
                    voluntary_exits: {
                      /** @description The [`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#voluntaryexit) object from the CL spec. */
                      message: {
                        /**
                         * @description Minimum epoch for processing exit.
                         * @example 1
                         */
                        epoch: string;
                        /**
                         * @description Index of the exiting validator.
                         * @example 1
                         */
                        validator_index: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    /** @description The [`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/altair/beacon-chain.md#syncaggregate) object from the CL Altair spec. */
                    sync_aggregate: {
                      /**
                       * Format: hex
                       * @description Aggregation bits of sync
                       * @example 0x01
                       */
                      sync_committee_bits: string;
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      sync_committee_signature: string;
                    };
                    bls_to_execution_changes: {
                      /** @description The [`BLSToExecutionChange`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#blstoexecutionchange) object from the CL spec. */
                      message: {
                        /**
                         * @description Index of the validator for which credentials will be changed.
                         * @example 1
                         */
                        validator_index: string;
                        /**
                         * Format: hex
                         * @description Public key of existing credentials.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        from_bls_pubkey: string;
                        /**
                         * Format: hex
                         * @description Execution address to which the credentials will be changed.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        to_execution_address: string;
                      };
                      /**
                       * Format: hex
                       * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                       */
                      signature: string;
                    }[];
                    blob_kzg_commitments: string[];
                  } & {
                    /** @description The [`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayloadheader) object from the CL Deneb spec. */
                    execution_payload_header: {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      parent_hash: string;
                      /**
                       * Format: hex
                       * @description An address on the execution (Ethereum 1) network.
                       * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                       */
                      fee_recipient: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      state_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      receipts_root: string;
                      /**
                       * Format: hex
                       * @example 0x
                       */
                      logs_bloom: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      prev_randao: string;
                      /** @example 1 */
                      block_number: string;
                      /** @example 1 */
                      gas_limit: string;
                      /** @example 1 */
                      gas_used: string;
                      /** @example 1 */
                      timestamp: string;
                      /**
                       * Format: hex
                       * @description Extra data on the execution (Ethereum 1) network.
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      extra_data: string;
                      /** @example 1 */
                      base_fee_per_gas: string;
                      /** @example 1 */
                      excess_blob_gas: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      block_hash: string;
                    } & {
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      transactions_root: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      withdrawals_root: string;
                    };
                    /** @description The [`ExecutionRequests`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.6/specs/electra/beacon-chain.md#executionrequests) object from the CL Electra spec. */
                    execution_requests: {
                      deposits: {
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        pubkey: string;
                        /**
                         * Format: hex
                         * @description The withdrawal credentials.
                         * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                         */
                        withdrawal_credentials: string;
                        /**
                         * @description The value to be deposited (gwei).
                         * @example 1
                         */
                        amount: string;
                        /**
                         * Format: hex
                         * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                         */
                        signature: string;
                        /**
                         * @description The index of the deposit request.
                         * @example 1
                         */
                        index: string;
                      }[];
                      withdrawals: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        validator_pubkey: string;
                        /**
                         * @description The value to be withdrawn (gwei).
                         * @example 1
                         */
                        amount: string;
                      }[];
                      consolidations: {
                        /**
                         * Format: hex
                         * @description Execution address which sent the request.
                         * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
                         */
                        source_address: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate from.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        source_pubkey: string;
                        /**
                         * Format: hex
                         * @description BLS public key of validator to consolidate to.
                         * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
                         */
                        target_pubkey: string;
                      }[];
                    };
                  };
                }
              >;
          };
          'application/octet-stream': unknown;
        };
      };
      /** Invalid block production request */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Accepted media type is not supported. */
      406: {
        content: {
          'application/json': {
            /**
             * @description The media type in "Accept" header is unsupported, and the request has been rejected. This occurs when the server cannot produce a response in the format accepted by the client.
             * @example 406
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Requests that the beacon node produce an AttestationData.
   *
   * A 503 error must be returned if the block identified by the response
   * `beacon_block_root` is optimistic (i.e. the attestation attests to a block
   * that has not been fully verified by an execution engine).
   */
  produceAttestationData: {
    parameters: {
      query: {
        /** The slot for which an attestation data should be created. */
        slot: string;
        /** The committee index for which an attestation data should be created. */
        committee_index: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
            data: {
              /** @example 1 */
              slot: string;
              /** @example 1 */
              index: string;
              /**
               * Format: hex
               * @description LMD GHOST vote.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              source: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
              /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
              target: {
                /** @example 1 */
                epoch: string;
                /**
                 * Format: hex
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                root: string;
              };
            };
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Aggregates all attestations matching given attestation data root and slot.
   *
   * A 503 error must be returned if the block identified by the response
   * `beacon_block_root` is optimistic (i.e. the aggregated attestation attests
   * to a block that has not been fully verified by an execution engine).
   *
   * A 404 error must be returned if no attestation is available for the requested
   * `attestation_data_root`.
   */
  getAggregatedAttestation: {
    parameters: {
      query: {
        /** HashTreeRoot of AttestationData that validator wants aggregated */
        attestation_data_root: string;
        slot: string;
      };
    };
    responses: {
      /** Returns aggregated `Attestation` object with same `AttestationData` root. */
      200: {
        content: {
          'application/json': {
            /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
            data: {
              /**
               * Format: hex
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits: string;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description BLS aggregate signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Aggregates all attestations matching given attestation data root, slot and committee index.
   *
   * A 503 error must be returned if the block identified by the response
   * `beacon_block_root` is optimistic (i.e. the aggregated attestation attests
   * to a block that has not been fully verified by an execution engine).
   *
   * A 404 error must be returned if no attestation is available for the requested
   * `attestation_data_root`.
   */
  getAggregatedAttestationV2: {
    parameters: {
      query: {
        /** HashTreeRoot of AttestationData that validator wants aggregated */
        attestation_data_root: string;
        slot: string;
        committee_index: string;
      };
    };
    responses: {
      /** Returns aggregated `Attestation` object with same `AttestationData` root, slot and committee index. */
      200: {
        headers: {
          /**
           * The active consensus version to which the data belongs. Required in response so client can deserialize returned json or ssz data
           * more effectively.
           */
          'Eth-Consensus-Version':
            | 'phase0'
            | 'altair'
            | 'bellatrix'
            | 'capella'
            | 'deneb'
            | 'electra';
        };
        content: {
          'application/json': {
            /**
             * @example phase0
             * @enum {string}
             */
            version:
              | 'phase0'
              | 'altair'
              | 'bellatrix'
              | 'capella'
              | 'deneb'
              | 'electra';
            data: Partial<{
              /**
               * Format: hex
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits: string;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description BLS aggregate signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }> &
              Partial<{
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description BLS aggregate signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
                /**
                 * Format: hex
                 * @description Committee bits.
                 * @example 0x0000000000000001
                 */
                committee_bits: string;
              }>;
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /** Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic. */
  publishAggregateAndProofs: {
    responses: {
      /** Successful response */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          message: {
            /** @example 1 */
            aggregator_index: string;
            /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
            aggregate: {
              /**
               * Format: hex
               * @description Attester aggregation bits.
               * @example 0x01
               */
              aggregation_bits: string;
              /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
              data: {
                /** @example 1 */
                slot: string;
                /** @example 1 */
                index: string;
                /**
                 * Format: hex
                 * @description LMD GHOST vote.
                 * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                 */
                beacon_block_root: string;
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                source: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
                /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                target: {
                  /** @example 1 */
                  epoch: string;
                  /**
                   * Format: hex
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  root: string;
                };
              };
              /**
               * Format: hex
               * @description BLS aggregate signature.
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          } & {
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            selection_proof: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      };
    };
  };
  /** Verifies given aggregate and proofs and publishes them on appropriate gossipsub topic. */
  publishAggregateAndProofsV2: {
    parameters: {
      header: {
        /** The active consensus version to which the aggregate and proofs being submitted belong. */
        'Eth-Consensus-Version':
          | 'phase0'
          | 'altair'
          | 'bellatrix'
          | 'capella'
          | 'deneb'
          | 'electra';
      };
    };
    responses: {
      /** Successful response */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': Partial<
          {
            message: {
              /** @example 1 */
              aggregator_index: string;
              /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestation) object from the CL spec. */
              aggregate: {
                /**
                 * Format: hex
                 * @description Attester aggregation bits.
                 * @example 0x01
                 */
                aggregation_bits: string;
                /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                data: {
                  /** @example 1 */
                  slot: string;
                  /** @example 1 */
                  index: string;
                  /**
                   * Format: hex
                   * @description LMD GHOST vote.
                   * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                   */
                  beacon_block_root: string;
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  source: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                  /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                  target: {
                    /** @example 1 */
                    epoch: string;
                    /**
                     * Format: hex
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    root: string;
                  };
                };
                /**
                 * Format: hex
                 * @description BLS aggregate signature.
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                signature: string;
              };
            } & {
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              selection_proof: string;
            };
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            signature: string;
          }[]
        > &
          Partial<
            {
              message: {
                /** @example 1 */
                aggregator_index: string;
                /** @description The [`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.5.0-alpha.3/specs/electra/beacon-chain.md#attestation) object from the CL spec. */
                aggregate: {
                  /**
                   * Format: hex
                   * @description Attester aggregation bits.
                   * @example 0x01
                   */
                  aggregation_bits: string;
                  /** @description The [`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#attestationdata) object from the CL spec. */
                  data: {
                    /** @example 1 */
                    slot: string;
                    /** @example 1 */
                    index: string;
                    /**
                     * Format: hex
                     * @description LMD GHOST vote.
                     * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                     */
                    beacon_block_root: string;
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    source: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                    /** @description The [`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/phase0/beacon-chain.md#checkpoint */
                    target: {
                      /** @example 1 */
                      epoch: string;
                      /**
                       * Format: hex
                       * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
                       */
                      root: string;
                    };
                  };
                  /**
                   * Format: hex
                   * @description BLS aggregate signature.
                   * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                   */
                  signature: string;
                  /**
                   * Format: hex
                   * @description Committee bits.
                   * @example 0x0000000000000001
                   */
                  committee_bits: string;
                };
              } & {
                /**
                 * Format: hex
                 * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
                 */
                selection_proof: string;
              };
              /**
               * Format: hex
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            }[]
          >;
      };
    };
  };
  /**
   * After beacon node receives this request,
   * search using discv5 for peers related to this subnet
   * and replace current peers with those ones if necessary
   * If validator `is_aggregator`, beacon node must:
   * - announce subnet topic subscription on gossipsub
   * - aggregate attestations received on that subnet
   */
  prepareBeaconCommitteeSubnet: {
    responses: {
      /**
       * Slot signature is valid and beacon node has prepared the attestation subnet.
       *
       * Note that we cannot be certain the Beacon node will find peers for that subnet for various reasons.
       */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @example 1 */
          validator_index: string;
          /** @example 1 */
          committee_index: string;
          /**
           * @description Number of committees at the returned slot
           * @example 1
           */
          committees_at_slot: string;
          /**
           * @description Should be slot at which validator is assigned to attest
           * @example 1
           */
          slot: string;
          /** @description Signals to BN that a validator on the VC has been chosen for aggregator role. */
          is_aggregator: boolean;
        }[];
      };
    };
  };
  /**
   * Subscribe to a number of sync committee subnets
   *
   * Sync committees are not present in phase0, but are required for Altair networks.
   *
   * Subscribing to sync committee subnets is an action performed by VC to enable network participation in Altair networks, and only required if the VC has an active validator in an active sync committee.
   */
  prepareSyncCommitteeSubnets: {
    responses: {
      /** Successful response */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @example 1 */
          validator_index: string;
          sync_committee_indices: string[];
          /**
           * @description The final epoch (exclusive value) that the specified validator requires the subscription for.
           * @example 1
           */
          until_epoch: string;
        }[];
      };
    };
  };
  /**
   * This endpoint should be used by a validator client running as part of a distributed validator cluster, and is
   * implemented by a distributed validator middleware client. This endpoint is used to exchange partial
   * selection proofs for combined/aggregated selection proofs to allow a validator client
   * to correctly determine if any of its validators has been selected to perform an attestation aggregation duty in a slot.
   * Validator clients running in a distributed validator cluster must query this endpoint at the start of an epoch for the current and lookahead (next) epochs for
   * all validators that have attester duties in the current and lookahead epochs. Consensus clients need not support this
   * endpoint and may return a 501.
   */
  submitBeaconCommitteeSelections: {
    responses: {
      /** Returns the threshold aggregated beacon committee selection proofs. */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description Index of the validator
               * @example 1
               */
              validator_index: string;
              /**
               * @description The slot at which a validator is assigned to attest
               * @example 1
               */
              slot: string;
              /**
               * Format: hex
               * @description The `slot_signature` calculated by the validator for the upcoming attestation slot
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              selection_proof: string;
            }[];
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Endpoint not implemented. */
      501: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 501
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Index of the validator
           * @example 1
           */
          validator_index: string;
          /**
           * @description The slot at which a validator is assigned to attest
           * @example 1
           */
          slot: string;
          /**
           * Format: hex
           * @description The `slot_signature` calculated by the validator for the upcoming attestation slot
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          selection_proof: string;
        }[];
      };
    };
  };
  /**
   * Requests that the beacon node produce a sync committee contribution.
   *
   * A 503 error must be returned if the block identified by the response
   * `beacon_block_root` is optimistic (i.e. the sync committee contribution
   * refers to a block that has not been fully verified by an execution engine).
   *
   * A 404 error must be returned if no sync committee contribution is available
   * for the requested `beacon_block_root`.
   */
  produceSyncCommitteeContribution: {
    parameters: {
      query: {
        /** The slot for which a sync committee contribution should be created. */
        slot: string;
        /** the subcommittee index for which to produce the contribution. */
        subcommittee_index: string;
        /** the block root for which to produce the contribution. */
        beacon_block_root: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description The slot at which the validator is providing a sync committee contribution.
               * @example 1
               */
              slot: string;
              /**
               * Format: hex
               * @description Block root for this contribution.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /**
               * @description The index of the subcommittee that the contribution pertains to.
               * @example 1
               */
              subcommittee_index: string;
              /**
               * Format: hex
               * @description A bit is set if a signature from the validator at the corresponding index in the subcommittee is present in the aggregate `signature`.
               * @example 0xffffffffffffffffffffffffffffffff
               */
              aggregation_bits: string;
              /**
               * Format: hex
               * @description Signature by the validator(s) over the block root of `slot`
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Not found */
      404: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
  /**
   * Submit sync committee selections to a DVT middleware client. It returns the threshold aggregated sync
   * committee selection. This endpoint should be used by a validator client running as part of a distributed
   * validator cluster, and is implemented by a distributed validator middleware client. This endpoint is
   * used to exchange partial selection proofs (slot signatures) for combined/aggregated selection proofs to
   * allow a validator client to correctly determine if any of its validators has been selected to perform a
   * sync committee contribution (sync aggregation) duty in a slot. Validator clients running in a distributed validator cluster must query this endpoint
   * at the start of each slot for all validators that are included in the current sync committee. Consensus
   * clients need not support this endpoint and may return a 501.
   */
  submitSyncCommitteeSelections: {
    responses: {
      /** Returns the threshold aggregated sync committee selection proofs. */
      200: {
        content: {
          'application/json': {
            data: {
              /**
               * @description Index of the validator
               * @example 1
               */
              validator_index: string;
              /**
               * @description The slot at which validator is assigned to produce a sync committee contribution
               * @example 1
               */
              slot: string;
              /**
               * @description SubcommitteeIndex to which the validator is assigned
               * @example 1
               */
              subcommittee_index: string;
              /**
               * Format: hex
               * @description The `slot_signature` calculated by the validator for the upcoming sync committee slot
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              selection_proof: string;
            }[];
          };
        };
      };
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Endpoint not implemented. */
      501: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 501
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * @description Index of the validator
           * @example 1
           */
          validator_index: string;
          /**
           * @description The slot at which validator is assigned to produce a sync committee contribution
           * @example 1
           */
          slot: string;
          /**
           * @description SubcommitteeIndex to which the validator is assigned
           * @example 1
           */
          subcommittee_index: string;
          /**
           * Format: hex
           * @description The `slot_signature` calculated by the validator for the upcoming sync committee slot
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          selection_proof: string;
        }[];
      };
    };
  };
  /** Publish multiple signed sync committee contribution and proofs */
  publishContributionAndProofs: {
    responses: {
      /** Successful response */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          message: {
            /**
             * @description Index of validator in validator registry.
             * @example 1
             */
            aggregator_index: string;
            /**
             * Format: hex
             * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
             */
            selection_proof: string;
            contribution: {
              /**
               * @description The slot at which the validator is providing a sync committee contribution.
               * @example 1
               */
              slot: string;
              /**
               * Format: hex
               * @description Block root for this contribution.
               * @example 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2
               */
              beacon_block_root: string;
              /**
               * @description The index of the subcommittee that the contribution pertains to.
               * @example 1
               */
              subcommittee_index: string;
              /**
               * Format: hex
               * @description A bit is set if a signature from the validator at the corresponding index in the subcommittee is present in the aggregate `signature`.
               * @example 0xffffffffffffffffffffffffffffffff
               */
              aggregation_bits: string;
              /**
               * Format: hex
               * @description Signature by the validator(s) over the block root of `slot`
               * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
               */
              signature: string;
            };
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      };
    };
  };
  /**
   * Prepares the beacon node for potential proposers by supplying information
   * required when proposing blocks for the given validators.  The information
   * supplied for each validator index will persist through the epoch in which
   * the call is submitted and for a further two epochs after that, or until the
   * beacon node restarts.  It is expected that validator clients will send this
   * information periodically, for example each epoch, to ensure beacon nodes have
   * correct and timely fee recipient information.
   *
   * Note that there is no guarantee that the beacon node will use the supplied fee
   * recipient when creating a block proposal, so on receipt of a proposed block the
   * validator should confirm that it finds the fee recipient within the block
   * acceptable before signing it.
   *
   * Also note that requests containing currently inactive or unknown validator
   * indices will be accepted, as they may become active at a later epoch.
   */
  prepareBeaconProposer: {
    responses: {
      /** Preparation information has been received. */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @example 1 */
          validator_index: string;
          /**
           * Format: hex
           * @description An address on the execution (Ethereum 1) network.
           * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
           */
          fee_recipient: string;
        }[];
      };
    };
  };
  /**
   * Prepares the beacon node for engaging with external builders. The
   * information must be sent by the beacon node to the builder network. It is
   * expected that the validator client will send this information periodically
   * to ensure the beacon node has correct and timely registration information
   * to provide to builders.
   *
   * Note that only registrations for active or pending validators must be sent to the builder network.
   * Registrations for unknown or exited validators must be filtered out and not sent to the builder network.
   */
  registerValidator: {
    responses: {
      /** Registration information has been received. */
      200: unknown;
      /** Invalid request syntax. */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 400
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The `ValidatorRegistration` object from the Builder API specification. */
          message: {
            /**
             * Format: hex
             * @description Address to receive fees from the block.
             * @example 0xAbcF8e0d4e9587369b2301D0790347320302cc09
             */
            fee_recipient: string;
            /**
             * @description Preferred gas limit of validator.
             * @example 1
             */
            gas_limit: string;
            /**
             * @description Unix timestamp of registration.
             * @example 1
             */
            timestamp: string;
            /**
             * Format: hex
             * @description BLS public key of validator.
             * @example 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a
             */
            pubkey: string;
          };
          /**
           * Format: hex
           * @example 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505
           */
          signature: string;
        }[];
      };
    };
  };
  /** Requests the beacon node to indicate if a validator has been observed to be live in a given epoch. The beacon node might detect liveness by observing messages from the validator on the network, in the beacon chain, from its API or from any other source. A beacon node SHOULD support the current and previous epoch, however it MAY support earlier epoch. It is important to note that the values returned by the beacon node are not canonical; they are best-effort and based upon a subjective view of the network. A beacon node that was recently started or suffered a network partition may indicate that a validator is not live when it actually is. */
  getLiveness: {
    parameters: {
      path: {
        /** The epoch for which liveness is being queried */
        epoch: string;
      };
    };
    responses: {
      /** Success response */
      200: {
        content: {
          'application/json': {
            data: {
              /** @example 1 */
              index: string;
              is_live: boolean;
            }[];
          };
        };
      };
      /** Invalid epoch or index */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node is currently syncing, try again later. */
      503: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
    /** An array of the validator indices for which to detect liveness. */
    requestBody: {
      content: {
        'application/json': string[];
      };
    };
  };
  /**
   * Provides endpoint to subscribe to beacon node Server-Sent-Events stream.
   * Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)
   * implementation to listen on those events.
   *
   * Servers _may_ send SSE comments beginning with `:` for any purpose, including to keep the
   * event stream connection alive in the presence of proxy servers.
   */
  eventstream: {
    parameters: {
      query: {
        /** Event types to subscribe to */
        topics: (
          | 'head'
          | 'block'
          | 'block_gossip'
          | 'attestation'
          | 'single_attestation'
          | 'voluntary_exit'
          | 'bls_to_execution_change'
          | 'proposer_slashing'
          | 'attester_slashing'
          | 'finalized_checkpoint'
          | 'chain_reorg'
          | 'contribution_and_proof'
          | 'light_client_finality_update'
          | 'light_client_optimistic_update'
          | 'payload_attributes'
          | 'blob_sidecar'
        )[];
      };
    };
    responses: {
      /** Opened SSE stream. */
      200: {
        content: {
          'text/event-stream': string;
        };
      };
      /** The topics supplied could not be parsed */
      400: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
      /** Beacon node internal error. */
      500: {
        content: {
          'application/json': {
            /**
             * @description Either specific error code in case of invalid request or http status code
             * @example 404
             */
            code: number;
            /** @description Message describing error */
            message: string;
            /** @description Optional stacktraces, sent when node is in debug mode */
            stacktraces?: string[];
          };
        };
      };
    };
  };
}

export interface external {}
